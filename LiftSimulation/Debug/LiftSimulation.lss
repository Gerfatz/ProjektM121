
LiftSimulation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000446  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000446  000004da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c3  00800068  00800068  000004e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000514  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000177a  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f7  00000000  00000000  00001e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a59  00000000  00000000  00002701  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000404  00000000  00000000  0000315c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d7f  00000000  00000000  00003560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e57  00000000  00000000  000042df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005136  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 32       	cpi	r26, 0x2B	; 43
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 21 02 	jmp	0x442	; 0x442 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main(void)
{
    /* Replace with your application code */
   InitializePorts();
  92:	0e 94 67 00 	call	0xce	; 0xce <InitializePorts>
}
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	08 95       	ret

0000009c <EnterAtomic>:
		EnterAtomic();
		UsedTimers &= ~(1<<id);
		WaitingTimer[id] = 0;
		LeaveAtomic();
	}
}
  9c:	f8 94       	cli
  9e:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <enterAtomicNesting>
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <enterAtomicNesting>
  a8:	08 95       	ret

000000aa <LeaveAtomic>:
  aa:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <enterAtomicNesting>
  ae:	81 50       	subi	r24, 0x01	; 1
  b0:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <enterAtomicNesting>
  b4:	81 11       	cpse	r24, r1
  b6:	01 c0       	rjmp	.+2      	; 0xba <LeaveAtomic+0x10>
  b8:	78 94       	sei
  ba:	08 95       	ret

000000bc <Usart_Init>:
  bc:	10 bc       	out	0x20, r1	; 32
  be:	8c e0       	ldi	r24, 0x0C	; 12
  c0:	89 b9       	out	0x09, r24	; 9
  c2:	86 e8       	ldi	r24, 0x86	; 134
  c4:	80 bd       	out	0x20, r24	; 32
  c6:	88 e9       	ldi	r24, 0x98	; 152
  c8:	8a b9       	out	0x0a, r24	; 10
  ca:	78 94       	sei
  cc:	08 95       	ret

000000ce <InitializePorts>:
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	87 bb       	out	0x17, r24	; 23
  d2:	84 bb       	out	0x14, r24	; 20
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	11 ba       	out	0x11, r1	; 17
  d8:	0e 94 5e 00 	call	0xbc	; 0xbc <Usart_Init>
  dc:	85 b7       	in	r24, 0x35	; 53
  de:	83 60       	ori	r24, 0x03	; 3
  e0:	85 bf       	out	0x35, r24	; 53
  e2:	8b b7       	in	r24, 0x3b	; 59
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	8b bf       	out	0x3b, r24	; 59
  e8:	08 95       	ret

000000ea <Usart_PutChar>:
  ea:	8c b9       	out	0x0c, r24	; 12
  ec:	5d 9b       	sbis	0x0b, 5	; 11
  ee:	fe cf       	rjmp	.-4      	; 0xec <Usart_PutChar+0x2>
  f0:	08 95       	ret

000000f2 <SendEvent>:
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	c8 2f       	mov	r28, r24
  fc:	06 2f       	mov	r16, r22
  fe:	d4 2f       	mov	r29, r20
 100:	12 2f       	mov	r17, r18
 102:	0e 94 4e 00 	call	0x9c	; 0x9c <EnterAtomic>
 106:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <msgQ_in>
 10a:	e8 2f       	mov	r30, r24
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	af 01       	movw	r20, r30
 110:	4f 5f       	subi	r20, 0xFF	; 255
 112:	5f 4f       	sbci	r21, 0xFF	; 255
 114:	4f 71       	andi	r20, 0x1F	; 31
 116:	55 27       	eor	r21, r21
 118:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <msgQ_out>
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	42 17       	cp	r20, r18
 120:	53 07       	cpc	r21, r19
 122:	71 f4       	brne	.+28     	; 0x140 <SendEvent+0x4e>
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	0e 94 75 00 	call	0xea	; 0xea <Usart_PutChar>
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	0e 94 75 00 	call	0xea	; 0xea <Usart_PutChar>
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	0e 94 75 00 	call	0xea	; 0xea <Usart_PutChar>
 136:	8e ed       	ldi	r24, 0xDE	; 222
 138:	0e 94 75 00 	call	0xea	; 0xea <Usart_PutChar>
 13c:	8d ea       	ldi	r24, 0xAD	; 173
 13e:	f9 cf       	rjmp	.-14     	; 0x132 <SendEvent+0x40>
 140:	ee 0f       	add	r30, r30
 142:	ff 1f       	adc	r31, r31
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	e4 59       	subi	r30, 0x94	; 148
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	01 83       	std	Z+1, r16	; 0x01
 14e:	13 83       	std	Z+3, r17	; 0x03
 150:	d2 83       	std	Z+2, r29	; 0x02
 152:	c0 83       	st	Z, r28
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	8f 71       	andi	r24, 0x1F	; 31
 158:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <msgQ_in>
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	0c 94 55 00 	jmp	0xaa	; 0xaa <LeaveAtomic>

00000168 <MakeDoorStates>:
 168:	df 92       	push	r13
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	c3 e2       	ldi	r28, 0x23	; 35
 178:	d1 e0       	ldi	r29, 0x01	; 1
 17a:	00 e0       	ldi	r16, 0x00	; 0
 17c:	10 e0       	ldi	r17, 0x00	; 0
 17e:	ee 24       	eor	r14, r14
 180:	e3 94       	inc	r14
 182:	f1 2c       	mov	r15, r1
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	81 11       	cpse	r24, r1
 188:	24 c0       	rjmp	.+72     	; 0x1d2 <MakeDoorStates+0x6a>
 18a:	48 81       	ld	r20, Y
 18c:	40 ff       	sbrs	r20, 0
 18e:	23 c0       	rjmp	.+70     	; 0x1d6 <MakeDoorStates+0x6e>
 190:	4e 7f       	andi	r20, 0xFE	; 254
 192:	48 83       	st	Y, r20
 194:	20 2f       	mov	r18, r16
 196:	65 ec       	ldi	r22, 0xC5	; 197
 198:	80 e1       	ldi	r24, 0x10	; 16
 19a:	0e 94 79 00 	call	0xf2	; 0xf2 <SendEvent>
 19e:	88 81       	ld	r24, Y
 1a0:	40 91 ed 00 	lds	r20, 0x00ED	; 0x8000ed <OpenDoors>
 1a4:	84 ff       	sbrs	r24, 4
 1a6:	0a c0       	rjmp	.+20     	; 0x1bc <MakeDoorStates+0x54>
 1a8:	97 01       	movw	r18, r14
 1aa:	00 2e       	mov	r0, r16
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <MakeDoorStates+0x48>
 1ae:	22 0f       	add	r18, r18
 1b0:	0a 94       	dec	r0
 1b2:	ea f7       	brpl	.-6      	; 0x1ae <MakeDoorStates+0x46>
 1b4:	24 2b       	or	r18, r20
 1b6:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <OpenDoors>
 1ba:	0d c0       	rjmp	.+26     	; 0x1d6 <MakeDoorStates+0x6e>
 1bc:	c7 01       	movw	r24, r14
 1be:	00 2e       	mov	r0, r16
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <MakeDoorStates+0x5c>
 1c2:	88 0f       	add	r24, r24
 1c4:	0a 94       	dec	r0
 1c6:	ea f7       	brpl	.-6      	; 0x1c2 <MakeDoorStates+0x5a>
 1c8:	80 95       	com	r24
 1ca:	84 23       	and	r24, r20
 1cc:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <OpenDoors>
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <MakeDoorStates+0x6e>
 1d2:	81 50       	subi	r24, 0x01	; 1
 1d4:	89 83       	std	Y+1, r24	; 0x01
 1d6:	0f 5f       	subi	r16, 0xFF	; 255
 1d8:	1f 4f       	sbci	r17, 0xFF	; 255
 1da:	22 96       	adiw	r28, 0x02	; 2
 1dc:	04 30       	cpi	r16, 0x04	; 4
 1de:	11 05       	cpc	r17, r1
 1e0:	89 f6       	brne	.-94     	; 0x184 <MakeDoorStates+0x1c>
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	df 90       	pop	r13
 1f0:	08 95       	ret

000001f2 <__vector_1>:
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	4f 93       	push	r20
 202:	5f 93       	push	r21
 204:	6f 93       	push	r22
 206:	7f 93       	push	r23
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
 20c:	af 93       	push	r26
 20e:	bf 93       	push	r27
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
 214:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <ButtonState>
 218:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <ButtonState+0x1>
 21c:	91 60       	ori	r25, 0x01	; 1
 21e:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <ButtonState+0x1>
 222:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <ButtonState>
 226:	40 91 ee 00 	lds	r20, 0x00EE	; 0x8000ee <ButtonState>
 22a:	50 91 ef 00 	lds	r21, 0x00EF	; 0x8000ef <ButtonState+0x1>
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	69 ec       	ldi	r22, 0xC9	; 201
 232:	80 e1       	ldi	r24, 0x10	; 16
 234:	0e 94 79 00 	call	0xf2	; 0xf2 <SendEvent>
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	7f 91       	pop	r23
 246:	6f 91       	pop	r22
 248:	5f 91       	pop	r21
 24a:	4f 91       	pop	r20
 24c:	3f 91       	pop	r19
 24e:	2f 91       	pop	r18
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <__vector_13>:
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	2f 93       	push	r18
 266:	3f 93       	push	r19
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
 270:	5f 9b       	sbis	0x0b, 7	; 11
 272:	1e c0       	rjmp	.+60     	; 0x2b0 <__vector_13+0x56>
 274:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <USART_rxBufferIn>
 278:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <USART_rxBufferOut>
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	8f 71       	andi	r24, 0x1F	; 31
 282:	99 27       	eor	r25, r25
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	82 17       	cp	r24, r18
 288:	93 07       	cpc	r25, r19
 28a:	89 f0       	breq	.+34     	; 0x2ae <__vector_13+0x54>
 28c:	8c b1       	in	r24, 0x0c	; 12
 28e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <USART_rxBufferIn>
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	9e 0f       	add	r25, r30
 296:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <USART_rxBufferIn>
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	ed 5f       	subi	r30, 0xFD	; 253
 29e:	fe 4f       	sbci	r31, 0xFE	; 254
 2a0:	80 83       	st	Z, r24
 2a2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <USART_rxBufferIn>
 2a6:	8f 71       	andi	r24, 0x1F	; 31
 2a8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <USART_rxBufferIn>
 2ac:	e1 cf       	rjmp	.-62     	; 0x270 <__vector_13+0x16>
 2ae:	57 98       	cbi	0x0a, 7	; 10
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	3f 91       	pop	r19
 2ba:	2f 91       	pop	r18
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <__vector_7>:
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	2f 93       	push	r18
 2d2:	3f 93       	push	r19
 2d4:	4f 93       	push	r20
 2d6:	5f 93       	push	r21
 2d8:	6f 93       	push	r22
 2da:	7f 93       	push	r23
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	af 93       	push	r26
 2e2:	bf 93       	push	r27
 2e4:	ef 93       	push	r30
 2e6:	ff 93       	push	r31
 2e8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <ElevatorTick.1962>
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <ElevatorTick.1962>
 2f2:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__data_end>
 2f6:	9f 5f       	subi	r25, 0xFF	; 255
 2f8:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__data_end>
 2fc:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_start+0x2>
 300:	0e 94 15 02 	call	0x42a	; 0x42a <__udivmodqi4>
 304:	91 11       	cpse	r25, r1
 306:	14 c0       	rjmp	.+40     	; 0x330 <__vector_7+0x6a>
 308:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 30c:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <__data_start+0x1>
 310:	96 17       	cp	r25, r22
 312:	61 f0       	breq	.+24     	; 0x32c <__vector_7+0x66>
 314:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_start+0x4>
 318:	89 0f       	add	r24, r25
 31a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 31e:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <__data_start+0x5>
 322:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <__data_start+0x6>
 326:	30 97       	sbiw	r30, 0x00	; 0
 328:	09 f0       	breq	.+2      	; 0x32c <__vector_7+0x66>
 32a:	09 95       	icall
 32c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <ElevatorTick.1962>
 330:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 334:	6c e0       	ldi	r22, 0x0C	; 12
 336:	0e 94 15 02 	call	0x42a	; 0x42a <__udivmodqi4>
 33a:	91 11       	cpse	r25, r1
 33c:	04 c0       	rjmp	.+8      	; 0x346 <__vector_7+0x80>
 33e:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 342:	0e 94 b4 00 	call	0x168	; 0x168 <MakeDoorStates>
 346:	ff 91       	pop	r31
 348:	ef 91       	pop	r30
 34a:	bf 91       	pop	r27
 34c:	af 91       	pop	r26
 34e:	9f 91       	pop	r25
 350:	8f 91       	pop	r24
 352:	7f 91       	pop	r23
 354:	6f 91       	pop	r22
 356:	5f 91       	pop	r21
 358:	4f 91       	pop	r20
 35a:	3f 91       	pop	r19
 35c:	2f 91       	pop	r18
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <__vector_10>:


ISR(TIMER0_COMP_vect)
{
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	cf 92       	push	r12
 374:	df 92       	push	r13
 376:	ff 92       	push	r15
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
 37c:	2f 93       	push	r18
 37e:	3f 93       	push	r19
 380:	4f 93       	push	r20
 382:	5f 93       	push	r21
 384:	6f 93       	push	r22
 386:	7f 93       	push	r23
 388:	8f 93       	push	r24
 38a:	9f 93       	push	r25
 38c:	af 93       	push	r26
 38e:	bf 93       	push	r27
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	ef 93       	push	r30
 396:	ff 93       	push	r31
 398:	00 ef       	ldi	r16, 0xF0	; 240
 39a:	10 e0       	ldi	r17, 0x00	; 0

	for( int i = 0; i <8; i++ )
 39c:	c0 e0       	ldi	r28, 0x00	; 0
 39e:	d0 e0       	ldi	r29, 0x00	; 0
		{
			WaitingTimer[i]--;
			if( WaitingTimer[i]==0)
			{
				SendEvent(SignalSourceEnvironment, TimerEvent, 0, 0);
				UsedTimers &= ~(1<<i);
 3a0:	cc 24       	eor	r12, r12
 3a2:	c3 94       	inc	r12
 3a4:	d1 2c       	mov	r13, r1
ISR(TIMER0_COMP_vect)
{

	for( int i = 0; i <8; i++ )
	{
		if( UsedTimers&(1<<i))
 3a6:	f0 90 00 01 	lds	r15, 0x0100	; 0x800100 <UsedTimers>
 3aa:	8f 2d       	mov	r24, r15
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0c 2e       	mov	r0, r28
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <__vector_10+0x4e>
 3b2:	95 95       	asr	r25
 3b4:	87 95       	ror	r24
 3b6:	0a 94       	dec	r0
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <__vector_10+0x4a>
 3ba:	80 ff       	sbrs	r24, 0
 3bc:	18 c0       	rjmp	.+48     	; 0x3ee <__vector_10+0x86>
		{
			WaitingTimer[i]--;
 3be:	f8 01       	movw	r30, r16
 3c0:	80 81       	ld	r24, Z
 3c2:	91 81       	ldd	r25, Z+1	; 0x01
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	91 83       	std	Z+1, r25	; 0x01
 3c8:	80 83       	st	Z, r24
			if( WaitingTimer[i]==0)
 3ca:	89 2b       	or	r24, r25
 3cc:	81 f4       	brne	.+32     	; 0x3ee <__vector_10+0x86>
			{
				SendEvent(SignalSourceEnvironment, TimerEvent, 0, 0);
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	68 ec       	ldi	r22, 0xC8	; 200
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 79 00 	call	0xf2	; 0xf2 <SendEvent>
				UsedTimers &= ~(1<<i);
 3da:	c6 01       	movw	r24, r12
 3dc:	0c 2e       	mov	r0, r28
 3de:	01 c0       	rjmp	.+2      	; 0x3e2 <__vector_10+0x7a>
 3e0:	88 0f       	add	r24, r24
 3e2:	0a 94       	dec	r0
 3e4:	ea f7       	brpl	.-6      	; 0x3e0 <__vector_10+0x78>
 3e6:	80 95       	com	r24
 3e8:	f8 22       	and	r15, r24
 3ea:	f0 92 00 01 	sts	0x0100, r15	; 0x800100 <UsedTimers>


ISR(TIMER0_COMP_vect)
{

	for( int i = 0; i <8; i++ )
 3ee:	21 96       	adiw	r28, 0x01	; 1
 3f0:	0e 5f       	subi	r16, 0xFE	; 254
 3f2:	1f 4f       	sbci	r17, 0xFF	; 255
 3f4:	c8 30       	cpi	r28, 0x08	; 8
 3f6:	d1 05       	cpc	r29, r1
 3f8:	b1 f6       	brne	.-84     	; 0x3a6 <__vector_10+0x3e>
				SendEvent(SignalSourceEnvironment, TimerEvent, 0, 0);
				UsedTimers &= ~(1<<i);
			}
		}
	}
}
 3fa:	ff 91       	pop	r31
 3fc:	ef 91       	pop	r30
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	bf 91       	pop	r27
 404:	af 91       	pop	r26
 406:	9f 91       	pop	r25
 408:	8f 91       	pop	r24
 40a:	7f 91       	pop	r23
 40c:	6f 91       	pop	r22
 40e:	5f 91       	pop	r21
 410:	4f 91       	pop	r20
 412:	3f 91       	pop	r19
 414:	2f 91       	pop	r18
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	ff 90       	pop	r15
 41c:	df 90       	pop	r13
 41e:	cf 90       	pop	r12
 420:	0f 90       	pop	r0
 422:	0f be       	out	0x3f, r0	; 63
 424:	0f 90       	pop	r0
 426:	1f 90       	pop	r1
 428:	18 95       	reti

0000042a <__udivmodqi4>:
 42a:	99 1b       	sub	r25, r25
 42c:	79 e0       	ldi	r23, 0x09	; 9
 42e:	04 c0       	rjmp	.+8      	; 0x438 <__udivmodqi4_ep>

00000430 <__udivmodqi4_loop>:
 430:	99 1f       	adc	r25, r25
 432:	96 17       	cp	r25, r22
 434:	08 f0       	brcs	.+2      	; 0x438 <__udivmodqi4_ep>
 436:	96 1b       	sub	r25, r22

00000438 <__udivmodqi4_ep>:
 438:	88 1f       	adc	r24, r24
 43a:	7a 95       	dec	r23
 43c:	c9 f7       	brne	.-14     	; 0x430 <__udivmodqi4_loop>
 43e:	80 95       	com	r24
 440:	08 95       	ret

00000442 <_exit>:
 442:	f8 94       	cli

00000444 <__stop_program>:
 444:	ff cf       	rjmp	.-2      	; 0x444 <__stop_program>
