
LiftSimulation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ae0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000ae0  00000b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e8  00800078  00800078  00000b8c  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020e8  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b9c  00000000  00000000  00002ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c55  00000000  00000000  00003a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c0  00000000  00000000  0000469c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ec2  00000000  00000000  00004b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011f5  00000000  00000000  00005a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00006c13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 43 04 	jmp	0x886	; 0x886 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 65 00 	call	0xca	; 0xca <main>
  8a:	0c 94 6e 05 	jmp	0xadc	; 0xadc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TestFunction>:
	InitializeStart();
}

void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
    if( data[0] < 4 )
  92:	fc 01       	movw	r30, r24
  94:	40 81       	ld	r20, Z
  96:	44 30       	cpi	r20, 0x04	; 4
  98:	30 f4       	brcc	.+12     	; 0xa6 <TestFunction+0x14>
	{
		SendEvent(SignalSourceApp, Message_MoveTo, data[0], 0);
  9a:	20 e0       	ldi	r18, 0x00	; 0
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	80 e2       	ldi	r24, 0x20	; 32
  a0:	0e 94 10 02 	call	0x420	; 0x420 <SendEvent>
  a4:	08 95       	ret
	}
	else if(data[0] == 4){
  a6:	44 30       	cpi	r20, 0x04	; 4
  a8:	39 f4       	brne	.+14     	; 0xb8 <TestFunction+0x26>
		SendEvent(SignalSourceApp, Message_MoveDoors, Door00, Door100);
  aa:	20 ef       	ldi	r18, 0xF0	; 240
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	63 e0       	ldi	r22, 0x03	; 3
  b0:	80 e2       	ldi	r24, 0x20	; 32
  b2:	0e 94 10 02 	call	0x420	; 0x420 <SendEvent>
  b6:	08 95       	ret
	}
	else if(data[0] == 5){
  b8:	45 30       	cpi	r20, 0x05	; 5
  ba:	31 f4       	brne	.+12     	; 0xc8 <TestFunction+0x36>
		SendEvent(SignalSourceApp, Message_MoveDoors, Door100, Door00);
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	40 ef       	ldi	r20, 0xF0	; 240
  c0:	63 e0       	ldi	r22, 0x03	; 3
  c2:	80 e2       	ldi	r24, 0x20	; 32
  c4:	0e 94 10 02 	call	0x420	; 0x420 <SendEvent>
  c8:	08 95       	ret

000000ca <main>:

void TestFunction(uint8_t* data, uint8_t nrOfBytes);

int main(void)
{
    InitializePorts();
  ca:	0e 94 fe 01 	call	0x3fc	; 0x3fc <InitializePorts>
	Usart_Init();
  ce:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Usart_Init>
	RegisterTestHandler( TestFunction );
  d2:	89 e4       	ldi	r24, 0x49	; 73
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <RegisterTestHandler>
	RegisterFsm(&_motorCtrl.fsm);
  da:	80 e6       	ldi	r24, 0x60	; 96
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 4b 01 	call	0x296	; 0x296 <RegisterFsm>
	// letzte Funktion die aufgerufen wird!
	InitializeStart();
  e2:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <InitializeStart>
}
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	08 95       	ret

000000ec <NotifyCalibrationDone>:
	.target = Floor0,
	.fsm  = { .Next = 0, .CurrentState = MotorCtrl_Initializing, .RxMask = 0xFF },
};

void NotifyCalibrationDone(uint8_t currentPos, uint8_t targetPostion)
{
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	d8 2f       	mov	r29, r24
  f4:	16 2f       	mov	r17, r22
	FloorType floor = (FloorType)currentPos/16;
  f6:	c8 2f       	mov	r28, r24
  f8:	c2 95       	swap	r28
  fa:	cf 70       	andi	r28, 0x0F	; 15
	SetDisplay(floor);
  fc:	8c 2f       	mov	r24, r28
  fe:	0e 94 ed 01 	call	0x3da	; 0x3da <SetDisplay>
	if( ((currentPos %floor) == 0 ) && floor == Floor0 )
 102:	8d 2f       	mov	r24, r29
 104:	6c 2f       	mov	r22, r28
 106:	0e 94 62 05 	call	0xac4	; 0xac4 <__udivmodqi4>
 10a:	91 11       	cpse	r25, r1
 10c:	08 c0       	rjmp	.+16     	; 0x11e <NotifyCalibrationDone+0x32>
 10e:	c1 11       	cpse	r28, r1
 110:	06 c0       	rjmp	.+12     	; 0x11e <NotifyCalibrationDone+0x32>
	{
		SendEvent(SignalSourceEnvironment, LiftCalibrated, currentPos, targetPostion);
 112:	21 2f       	mov	r18, r17
 114:	4d 2f       	mov	r20, r29
 116:	62 ec       	ldi	r22, 0xC2	; 194
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 10 02 	call	0x420	; 0x420 <SendEvent>
	}
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	08 95       	ret

00000126 <OnElevatorPositionChanged>:
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
	}
}

void OnElevatorPositionChanged(uint8_t currentPos, uint8_t targetPos)
{
 126:	26 2f       	mov	r18, r22
	SendEvent(SignalSourceElevator, Message_PosChanged, currentPos, targetPos);
 128:	48 2f       	mov	r20, r24
 12a:	62 e0       	ldi	r22, 0x02	; 2
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	0e 94 10 02 	call	0x420	; 0x420 <SendEvent>
 132:	08 95       	ret

00000134 <MotorCtrl_Initializing>:
	}
}

void MotorCtrl_Initializing(Message* msg)
{
	if( msg->Id == LiftStarted)
 134:	fc 01       	movw	r30, r24
 136:	81 81       	ldd	r24, Z+1	; 0x01
 138:	81 3c       	cpi	r24, 0xC1	; 193
 13a:	29 f4       	brne	.+10     	; 0x146 <MotorCtrl_Initializing+0x12>
	{
		CalibrateElevatorPosition(NotifyCalibrationDone);
 13c:	86 e7       	ldi	r24, 0x76	; 118
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <CalibrateElevatorPosition>
		return;
 144:	08 95       	ret
	}
	if( msg->Id == LiftCalibrated )
 146:	82 3c       	cpi	r24, 0xC2	; 194
 148:	49 f4       	brne	.+18     	; 0x15c <MotorCtrl_Initializing+0x28>
	{
		SetDisplay(Floor0);
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 ed 01 	call	0x3da	; 0x3da <SetDisplay>
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 150:	6c ed       	ldi	r22, 0xDC	; 220
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	80 e6       	ldi	r24, 0x60	; 96
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 3b 01 	call	0x276	; 0x276 <SetState>
 15c:	08 95       	ret

0000015e <MotorCtrl_Moving>:
	}
}


void MotorCtrl_Moving(Message* msg)
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	ec 01       	movw	r28, r24
	SetDisplay((FloorType)(msg->MsgParamLow/POS_STEPS_PER_FLOOR));
 164:	8a 81       	ldd	r24, Y+2	; 0x02
 166:	82 95       	swap	r24
 168:	8f 70       	andi	r24, 0x0F	; 15
 16a:	0e 94 ed 01 	call	0x3da	; 0x3da <SetDisplay>
	
	if( msg->Id == Message_PosChanged && msg->MsgParamLow == msg->MsgParamHigh)
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	82 30       	cpi	r24, 0x02	; 2
 172:	91 f4       	brne	.+36     	; 0x198 <MotorCtrl_Moving+0x3a>
 174:	8a 81       	ldd	r24, Y+2	; 0x02
 176:	9b 81       	ldd	r25, Y+3	; 0x03
 178:	89 13       	cpse	r24, r25
 17a:	0e c0       	rjmp	.+28     	; 0x198 <MotorCtrl_Moving+0x3a>
	{
		_motorCtrl.target = (FloorType)msg->MsgParamLow;
 17c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
		SetState(&_motorCtrl.fsm, MotorCtrl_DoorsMoving);
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	71 e0       	ldi	r23, 0x01	; 1
 184:	80 e6       	ldi	r24, 0x60	; 96
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 3b 01 	call	0x276	; 0x276 <SetState>
		SendEvent(SignalSourceElevator, Message_MoveDoors, Door00, Door100);
 18c:	20 ef       	ldi	r18, 0xF0	; 240
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	63 e0       	ldi	r22, 0x03	; 3
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 10 02 	call	0x420	; 0x420 <SendEvent>
	}
}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <MotorCtrl_DoorsOpened>:
		}
	}
}

void MotorCtrl_DoorsOpened(Message* msg){
	SetState(&_motorCtrl.fsm, MotorCtrl_DoorsMoving);
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	71 e0       	ldi	r23, 0x01	; 1
 1a2:	80 e6       	ldi	r24, 0x60	; 96
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 3b 01 	call	0x276	; 0x276 <SetState>
	SendEvent(SignalSourceDoor, Message_MoveDoors, Door100, Door00);
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	40 ef       	ldi	r20, 0xF0	; 240
 1ae:	63 e0       	ldi	r22, 0x03	; 3
 1b0:	80 e1       	ldi	r24, 0x10	; 16
 1b2:	0e 94 10 02 	call	0x420	; 0x420 <SendEvent>
 1b6:	08 95       	ret

000001b8 <MotorCtrl_Stopped>:
	SendEvent(SignalSourceElevator, Message_PosChanged, currentPos, targetPos);
}


void MotorCtrl_Stopped(Message* msg)
{
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
	if( msg->Id == Message_MoveTo && msg->MsgParamLow < 4 && ReadDoorState(_motorCtrl.target/POS_STEPS_PER_FLOOR) == DoorClosed)
 1bc:	fc 01       	movw	r30, r24
 1be:	21 81       	ldd	r18, Z+1	; 0x01
 1c0:	21 30       	cpi	r18, 0x01	; 1
 1c2:	e1 f4       	brne	.+56     	; 0x1fc <MotorCtrl_Stopped+0x44>
 1c4:	22 81       	ldd	r18, Z+2	; 0x02
 1c6:	24 30       	cpi	r18, 0x04	; 4
 1c8:	c8 f4       	brcc	.+50     	; 0x1fc <MotorCtrl_Stopped+0x44>
 1ca:	ec 01       	movw	r28, r24
 1cc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 1d0:	82 95       	swap	r24
 1d2:	8f 70       	andi	r24, 0x0F	; 15
 1d4:	0e 94 b0 01 	call	0x360	; 0x360 <ReadDoorState>
 1d8:	80 32       	cpi	r24, 0x20	; 32
 1da:	81 f4       	brne	.+32     	; 0x1fc <MotorCtrl_Stopped+0x44>
	{
		_motorCtrl.target = (FloorType)msg->MsgParamLow;
 1dc:	8a 81       	ldd	r24, Y+2	; 0x02
 1de:	c0 e6       	ldi	r28, 0x60	; 96
 1e0:	d0 e0       	ldi	r29, 0x00	; 0
 1e2:	8e 83       	std	Y+6, r24	; 0x06
		
		SetState(&_motorCtrl.fsm, MotorCtrl_Moving);
 1e4:	6f ea       	ldi	r22, 0xAF	; 175
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	ce 01       	movw	r24, r28
 1ea:	0e 94 3b 01 	call	0x276	; 0x276 <SetState>
		MoveElevator(_motorCtrl.target * POS_STEPS_PER_FLOOR, OnElevatorPositionChanged );
 1ee:	8e 81       	ldd	r24, Y+6	; 0x06
 1f0:	63 e9       	ldi	r22, 0x93	; 147
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	82 95       	swap	r24
 1f6:	80 7f       	andi	r24, 0xF0	; 240
 1f8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <MoveElevator>
	}
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <MotorCtrl_DoorsMoving>:
	}
}

void MotorCtrl_DoorsMoving(Message* msg){
	
	if( msg->Id == Message_MoveDoors && !(msg->MsgParamLow == msg->MsgParamHigh))
 202:	fc 01       	movw	r30, r24
 204:	21 81       	ldd	r18, Z+1	; 0x01
 206:	23 30       	cpi	r18, 0x03	; 3
 208:	29 f5       	brne	.+74     	; 0x254 <MotorCtrl_DoorsMoving+0x52>
 20a:	22 81       	ldd	r18, Z+2	; 0x02
 20c:	83 81       	ldd	r24, Z+3	; 0x03
 20e:	28 17       	cp	r18, r24
 210:	09 f1       	breq	.+66     	; 0x254 <MotorCtrl_DoorsMoving+0x52>
	{
		if(msg->MsgParamHigh < msg->MsgParamLow)
 212:	82 17       	cp	r24, r18
 214:	70 f4       	brcc	.+28     	; 0x232 <MotorCtrl_DoorsMoving+0x30>
		{
			SetDoorState(DoorClosing, _motorCtrl.target/POS_STEPS_PER_FLOOR);
 216:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 21a:	62 95       	swap	r22
 21c:	6f 70       	andi	r22, 0x0F	; 15
 21e:	81 e2       	ldi	r24, 0x21	; 33
 220:	0e 94 b8 01 	call	0x370	; 0x370 <SetDoorState>
			SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 224:	6c ed       	ldi	r22, 0xDC	; 220
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	80 e6       	ldi	r24, 0x60	; 96
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 3b 01 	call	0x276	; 0x276 <SetState>
 230:	08 95       	ret
		}
		else
		{
			SetDoorState(DoorOpening, _motorCtrl.target/POS_STEPS_PER_FLOOR);		
 232:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 236:	62 95       	swap	r22
 238:	6f 70       	andi	r22, 0x0F	; 15
 23a:	81 e1       	ldi	r24, 0x11	; 17
 23c:	0e 94 b8 01 	call	0x370	; 0x370 <SetDoorState>
			SetState(&_motorCtrl.fsm, MotorCtrl_DoorsOpened);
 240:	6f ec       	ldi	r22, 0xCF	; 207
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	80 e6       	ldi	r24, 0x60	; 96
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 3b 01 	call	0x276	; 0x276 <SetState>
			StartTimer(10000);
 24c:	80 e1       	ldi	r24, 0x10	; 16
 24e:	97 e2       	ldi	r25, 0x27	; 39
 250:	0e 94 ca 04 	call	0x994	; 0x994 <StartTimer>
 254:	08 95       	ret

00000256 <EnterAtomic>:
 256:	f8 94       	cli
 258:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <enterAtomicNesting>
 25c:	8f 5f       	subi	r24, 0xFF	; 255
 25e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <enterAtomicNesting>
 262:	08 95       	ret

00000264 <LeaveAtomic>:
 264:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <enterAtomicNesting>
 268:	81 50       	subi	r24, 0x01	; 1
 26a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <enterAtomicNesting>
 26e:	81 11       	cpse	r24, r1
 270:	01 c0       	rjmp	.+2      	; 0x274 <LeaveAtomic+0x10>
 272:	78 94       	sei
 274:	08 95       	ret

00000276 <SetState>:
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	ec 01       	movw	r28, r24
 280:	8b 01       	movw	r16, r22
 282:	0e 94 2b 01 	call	0x256	; 0x256 <EnterAtomic>
 286:	1c 83       	std	Y+4, r17	; 0x04
 288:	0b 83       	std	Y+3, r16	; 0x03
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	0c 94 32 01 	jmp	0x264	; 0x264 <LeaveAtomic>

00000296 <RegisterFsm>:
 296:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <anchor>
 29a:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <anchor+0x1>
 29e:	a7 e6       	ldi	r26, 0x67	; 103
 2a0:	b0 e0       	ldi	r27, 0x00	; 0
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	e7 36       	cpi	r30, 0x67	; 103
 2a6:	f2 07       	cpc	r31, r18
 2a8:	29 f0       	breq	.+10     	; 0x2b4 <RegisterFsm+0x1e>
 2aa:	df 01       	movw	r26, r30
 2ac:	01 90       	ld	r0, Z+
 2ae:	f0 81       	ld	r31, Z
 2b0:	e0 2d       	mov	r30, r0
 2b2:	f7 cf       	rjmp	.-18     	; 0x2a2 <RegisterFsm+0xc>
 2b4:	8d 93       	st	X+, r24
 2b6:	9c 93       	st	X, r25
 2b8:	dc 01       	movw	r26, r24
 2ba:	ed 93       	st	X+, r30
 2bc:	fc 93       	st	X, r31
 2be:	08 95       	ret

000002c0 <DispatchEvent>:
 2c0:	0f 93       	push	r16
 2c2:	1f 93       	push	r17
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	0e 94 2b 01 	call	0x256	; 0x256 <EnterAtomic>
 2cc:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <msgQ_out>
 2d0:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <msgQ_in>
 2d4:	98 17       	cp	r25, r24
 2d6:	59 f0       	breq	.+22     	; 0x2ee <DispatchEvent+0x2e>
 2d8:	84 e0       	ldi	r24, 0x04	; 4
 2da:	98 9f       	mul	r25, r24
 2dc:	e0 01       	movw	r28, r0
 2de:	11 24       	eor	r1, r1
 2e0:	cd 56       	subi	r28, 0x6D	; 109
 2e2:	df 4f       	sbci	r29, 0xFF	; 255
 2e4:	9f 5f       	subi	r25, 0xFF	; 255
 2e6:	9f 71       	andi	r25, 0x1F	; 31
 2e8:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <msgQ_out>
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DispatchEvent+0x32>
 2ee:	c0 e0       	ldi	r28, 0x00	; 0
 2f0:	d0 e0       	ldi	r29, 0x00	; 0
 2f2:	0e 94 32 01 	call	0x264	; 0x264 <LeaveAtomic>
 2f6:	20 97       	sbiw	r28, 0x00	; 0
 2f8:	c9 f0       	breq	.+50     	; 0x32c <DispatchEvent+0x6c>
 2fa:	00 91 67 00 	lds	r16, 0x0067	; 0x800067 <anchor>
 2fe:	10 91 68 00 	lds	r17, 0x0068	; 0x800068 <anchor+0x1>
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	07 36       	cpi	r16, 0x67	; 103
 306:	1f 07       	cpc	r17, r31
 308:	89 f0       	breq	.+34     	; 0x32c <DispatchEvent+0x6c>
 30a:	d8 01       	movw	r26, r16
 30c:	12 96       	adiw	r26, 0x02	; 2
 30e:	9c 91       	ld	r25, X
 310:	12 97       	sbiw	r26, 0x02	; 2
 312:	88 81       	ld	r24, Y
 314:	89 23       	and	r24, r25
 316:	31 f0       	breq	.+12     	; 0x324 <DispatchEvent+0x64>
 318:	13 96       	adiw	r26, 0x03	; 3
 31a:	ed 91       	ld	r30, X+
 31c:	fc 91       	ld	r31, X
 31e:	14 97       	sbiw	r26, 0x04	; 4
 320:	ce 01       	movw	r24, r28
 322:	09 95       	icall
 324:	f8 01       	movw	r30, r16
 326:	00 81       	ld	r16, Z
 328:	11 81       	ldd	r17, Z+1	; 0x01
 32a:	eb cf       	rjmp	.-42     	; 0x302 <DispatchEvent+0x42>
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	08 95       	ret

00000336 <InitializeCounter>:
 336:	12 be       	out	0x32, r1	; 50
 338:	8b e0       	ldi	r24, 0x0B	; 11
 33a:	83 bf       	out	0x33, r24	; 51
 33c:	8d e7       	ldi	r24, 0x7D	; 125
 33e:	8c bf       	out	0x3c, r24	; 60
 340:	89 b7       	in	r24, 0x39	; 57
 342:	82 60       	ori	r24, 0x02	; 2
 344:	89 bf       	out	0x39, r24	; 57
 346:	80 e8       	ldi	r24, 0x80	; 128
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	9b bd       	out	0x2b, r25	; 43
 34c:	8a bd       	out	0x2a, r24	; 42
 34e:	1d bc       	out	0x2d, r1	; 45
 350:	1c bc       	out	0x2c, r1	; 44
 352:	1f bc       	out	0x2f, r1	; 47
 354:	8d e0       	ldi	r24, 0x0D	; 13
 356:	8e bd       	out	0x2e, r24	; 46
 358:	89 b7       	in	r24, 0x39	; 57
 35a:	80 61       	ori	r24, 0x10	; 16
 35c:	89 bf       	out	0x39, r24	; 57
 35e:	08 95       	ret

00000360 <ReadDoorState>:
 360:	e8 2f       	mov	r30, r24
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	ee 0f       	add	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	e8 5a       	subi	r30, 0xA8	; 168
 36a:	fe 4f       	sbci	r31, 0xFE	; 254
 36c:	80 81       	ld	r24, Z
 36e:	08 95       	ret

00000370 <SetDoorState>:
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	d8 2f       	mov	r29, r24
 376:	c6 2f       	mov	r28, r22
 378:	0e 94 2b 01 	call	0x256	; 0x256 <EnterAtomic>
 37c:	6c 2f       	mov	r22, r28
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	8d 2f       	mov	r24, r29
 382:	80 73       	andi	r24, 0x30	; 48
 384:	66 0f       	add	r22, r22
 386:	77 1f       	adc	r23, r23
 388:	fb 01       	movw	r30, r22
 38a:	e8 5a       	subi	r30, 0xA8	; 168
 38c:	fe 4f       	sbci	r31, 0xFE	; 254
 38e:	90 81       	ld	r25, Z
 390:	98 23       	and	r25, r24
 392:	11 f4       	brne	.+4      	; 0x398 <SetDoorState+0x28>
 394:	94 e0       	ldi	r25, 0x04	; 4
 396:	91 83       	std	Z+1, r25	; 0x01
 398:	fb 01       	movw	r30, r22
 39a:	e8 5a       	subi	r30, 0xA8	; 168
 39c:	fe 4f       	sbci	r31, 0xFE	; 254
 39e:	81 60       	ori	r24, 0x01	; 1
 3a0:	80 83       	st	Z, r24
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	0c 94 32 01 	jmp	0x264	; 0x264 <LeaveAtomic>

000003aa <MoveElevator>:
 3aa:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Elevator+0x1>
 3ae:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Elevator+0x4>
 3b2:	70 93 72 00 	sts	0x0072, r23	; 0x800072 <Elevator+0x6>
 3b6:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <Elevator+0x5>
 3ba:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <Elevator>
 3be:	98 17       	cp	r25, r24
 3c0:	10 f4       	brcc	.+4      	; 0x3c6 <MoveElevator+0x1c>
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <MoveElevator+0x22>
 3c6:	89 17       	cp	r24, r25
 3c8:	18 f4       	brcc	.+6      	; 0x3d0 <MoveElevator+0x26>
 3ca:	8f ef       	ldi	r24, 0xFF	; 255
 3cc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Elevator+0x4>
 3d0:	08 95       	ret

000003d2 <CalibrateElevatorPosition>:
 3d2:	bc 01       	movw	r22, r24
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <MoveElevator>

000003da <SetDisplay>:
 3da:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <liftDisplay7Seg>
 3de:	08 95       	ret

000003e0 <RegisterTestHandler>:
 3e0:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <_testHandler+0x1>
 3e4:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <_testHandler>
 3e8:	08 95       	ret

000003ea <Usart_Init>:
 3ea:	10 bc       	out	0x20, r1	; 32
 3ec:	8c e0       	ldi	r24, 0x0C	; 12
 3ee:	89 b9       	out	0x09, r24	; 9
 3f0:	86 e8       	ldi	r24, 0x86	; 134
 3f2:	80 bd       	out	0x20, r24	; 32
 3f4:	88 e9       	ldi	r24, 0x98	; 152
 3f6:	8a b9       	out	0x0a, r24	; 10
 3f8:	78 94       	sei
 3fa:	08 95       	ret

000003fc <InitializePorts>:
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	87 bb       	out	0x17, r24	; 23
 400:	84 bb       	out	0x14, r24	; 20
 402:	8a bb       	out	0x1a, r24	; 26
 404:	11 ba       	out	0x11, r1	; 17
 406:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Usart_Init>
 40a:	85 b7       	in	r24, 0x35	; 53
 40c:	83 60       	ori	r24, 0x03	; 3
 40e:	85 bf       	out	0x35, r24	; 53
 410:	8b b7       	in	r24, 0x3b	; 59
 412:	80 64       	ori	r24, 0x40	; 64
 414:	8b bf       	out	0x3b, r24	; 59
 416:	08 95       	ret

00000418 <Usart_PutChar>:
 418:	8c b9       	out	0x0c, r24	; 12
 41a:	5d 9b       	sbis	0x0b, 5	; 11
 41c:	fe cf       	rjmp	.-4      	; 0x41a <Usart_PutChar+0x2>
 41e:	08 95       	ret

00000420 <SendEvent>:
 420:	0f 93       	push	r16
 422:	1f 93       	push	r17
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	c8 2f       	mov	r28, r24
 42a:	06 2f       	mov	r16, r22
 42c:	d4 2f       	mov	r29, r20
 42e:	12 2f       	mov	r17, r18
 430:	0e 94 2b 01 	call	0x256	; 0x256 <EnterAtomic>
 434:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <msgQ_in>
 438:	e8 2f       	mov	r30, r24
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	af 01       	movw	r20, r30
 43e:	4f 5f       	subi	r20, 0xFF	; 255
 440:	5f 4f       	sbci	r21, 0xFF	; 255
 442:	4f 71       	andi	r20, 0x1F	; 31
 444:	55 27       	eor	r21, r21
 446:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <msgQ_out>
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	42 17       	cp	r20, r18
 44e:	53 07       	cpc	r21, r19
 450:	71 f4       	brne	.+28     	; 0x46e <SendEvent+0x4e>
 452:	8f ef       	ldi	r24, 0xFF	; 255
 454:	0e 94 0c 02 	call	0x418	; 0x418 <Usart_PutChar>
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	0e 94 0c 02 	call	0x418	; 0x418 <Usart_PutChar>
 45e:	8f ef       	ldi	r24, 0xFF	; 255
 460:	0e 94 0c 02 	call	0x418	; 0x418 <Usart_PutChar>
 464:	8e ed       	ldi	r24, 0xDE	; 222
 466:	0e 94 0c 02 	call	0x418	; 0x418 <Usart_PutChar>
 46a:	8d ea       	ldi	r24, 0xAD	; 173
 46c:	f9 cf       	rjmp	.-14     	; 0x460 <SendEvent+0x40>
 46e:	ee 0f       	add	r30, r30
 470:	ff 1f       	adc	r31, r31
 472:	ee 0f       	add	r30, r30
 474:	ff 1f       	adc	r31, r31
 476:	ed 56       	subi	r30, 0x6D	; 109
 478:	ff 4f       	sbci	r31, 0xFF	; 255
 47a:	01 83       	std	Z+1, r16	; 0x01
 47c:	13 83       	std	Z+3, r17	; 0x03
 47e:	d2 83       	std	Z+2, r29	; 0x02
 480:	c0 83       	st	Z, r28
 482:	8f 5f       	subi	r24, 0xFF	; 255
 484:	8f 71       	andi	r24, 0x1F	; 31
 486:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <msgQ_in>
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	0c 94 32 01 	jmp	0x264	; 0x264 <LeaveAtomic>

00000496 <MakeDoorStates>:
 496:	df 92       	push	r13
 498:	ef 92       	push	r14
 49a:	ff 92       	push	r15
 49c:	0f 93       	push	r16
 49e:	1f 93       	push	r17
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
 4a4:	c8 e5       	ldi	r28, 0x58	; 88
 4a6:	d1 e0       	ldi	r29, 0x01	; 1
 4a8:	00 e0       	ldi	r16, 0x00	; 0
 4aa:	10 e0       	ldi	r17, 0x00	; 0
 4ac:	ee 24       	eor	r14, r14
 4ae:	e3 94       	inc	r14
 4b0:	f1 2c       	mov	r15, r1
 4b2:	89 81       	ldd	r24, Y+1	; 0x01
 4b4:	81 11       	cpse	r24, r1
 4b6:	24 c0       	rjmp	.+72     	; 0x500 <MakeDoorStates+0x6a>
 4b8:	48 81       	ld	r20, Y
 4ba:	40 ff       	sbrs	r20, 0
 4bc:	23 c0       	rjmp	.+70     	; 0x504 <MakeDoorStates+0x6e>
 4be:	4e 7f       	andi	r20, 0xFE	; 254
 4c0:	48 83       	st	Y, r20
 4c2:	20 2f       	mov	r18, r16
 4c4:	65 ec       	ldi	r22, 0xC5	; 197
 4c6:	80 e1       	ldi	r24, 0x10	; 16
 4c8:	0e 94 10 02 	call	0x420	; 0x420 <SendEvent>
 4cc:	88 81       	ld	r24, Y
 4ce:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <OpenDoors>
 4d2:	84 ff       	sbrs	r24, 4
 4d4:	0a c0       	rjmp	.+20     	; 0x4ea <MakeDoorStates+0x54>
 4d6:	97 01       	movw	r18, r14
 4d8:	00 2e       	mov	r0, r16
 4da:	01 c0       	rjmp	.+2      	; 0x4de <MakeDoorStates+0x48>
 4dc:	22 0f       	add	r18, r18
 4de:	0a 94       	dec	r0
 4e0:	ea f7       	brpl	.-6      	; 0x4dc <MakeDoorStates+0x46>
 4e2:	24 2b       	or	r18, r20
 4e4:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <OpenDoors>
 4e8:	0d c0       	rjmp	.+26     	; 0x504 <MakeDoorStates+0x6e>
 4ea:	c7 01       	movw	r24, r14
 4ec:	00 2e       	mov	r0, r16
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <MakeDoorStates+0x5c>
 4f0:	88 0f       	add	r24, r24
 4f2:	0a 94       	dec	r0
 4f4:	ea f7       	brpl	.-6      	; 0x4f0 <MakeDoorStates+0x5a>
 4f6:	80 95       	com	r24
 4f8:	84 23       	and	r24, r20
 4fa:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <OpenDoors>
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <MakeDoorStates+0x6e>
 500:	81 50       	subi	r24, 0x01	; 1
 502:	89 83       	std	Y+1, r24	; 0x01
 504:	0f 5f       	subi	r16, 0xFF	; 255
 506:	1f 4f       	sbci	r17, 0xFF	; 255
 508:	22 96       	adiw	r28, 0x02	; 2
 50a:	04 30       	cpi	r16, 0x04	; 4
 50c:	11 05       	cpc	r17, r1
 50e:	89 f6       	brne	.-94     	; 0x4b2 <MakeDoorStates+0x1c>
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	1f 91       	pop	r17
 516:	0f 91       	pop	r16
 518:	ff 90       	pop	r15
 51a:	ef 90       	pop	r14
 51c:	df 90       	pop	r13
 51e:	08 95       	ret

00000520 <ProcessMessage>:
 520:	db 01       	movw	r26, r22
 522:	82 30       	cpi	r24, 0x02	; 2
 524:	b1 f5       	brne	.+108    	; 0x592 <ProcessMessage+0x72>
 526:	8c 91       	ld	r24, X
 528:	98 2f       	mov	r25, r24
 52a:	90 72       	andi	r25, 0x20	; 32
 52c:	28 2f       	mov	r18, r24
 52e:	20 76       	andi	r18, 0x60	; 96
 530:	d9 f1       	breq	.+118    	; 0x5a8 <ProcessMessage+0x88>
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	38 2f       	mov	r19, r24
 536:	30 71       	andi	r19, 0x10	; 16
 538:	84 ff       	sbrs	r24, 4
 53a:	20 e0       	ldi	r18, 0x00	; 0
 53c:	99 23       	and	r25, r25
 53e:	11 f0       	breq	.+4      	; 0x544 <ProcessMessage+0x24>
 540:	94 e0       	ldi	r25, 0x04	; 4
 542:	01 c0       	rjmp	.+2      	; 0x546 <ProcessMessage+0x26>
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	8f 70       	andi	r24, 0x0F	; 15
 548:	89 0f       	add	r24, r25
 54a:	41 e0       	ldi	r20, 0x01	; 1
 54c:	50 e0       	ldi	r21, 0x00	; 0
 54e:	02 c0       	rjmp	.+4      	; 0x554 <ProcessMessage+0x34>
 550:	44 0f       	add	r20, r20
 552:	55 1f       	adc	r21, r21
 554:	8a 95       	dec	r24
 556:	e2 f7       	brpl	.-8      	; 0x550 <ProcessMessage+0x30>
 558:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ButtonState>
 55c:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <ButtonState+0x1>
 560:	ba 01       	movw	r22, r20
 562:	60 95       	com	r22
 564:	70 95       	com	r23
 566:	86 23       	and	r24, r22
 568:	97 23       	and	r25, r23
 56a:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <ButtonState+0x1>
 56e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <ButtonState>
 572:	33 23       	and	r19, r19
 574:	51 f0       	breq	.+20     	; 0x58a <ProcessMessage+0x6a>
 576:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ButtonState>
 57a:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <ButtonState+0x1>
 57e:	84 2b       	or	r24, r20
 580:	95 2b       	or	r25, r21
 582:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <ButtonState+0x1>
 586:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <ButtonState>
 58a:	67 ec       	ldi	r22, 0xC7	; 199
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	0c 94 10 02 	jmp	0x420	; 0x420 <SendEvent>
 592:	83 30       	cpi	r24, 0x03	; 3
 594:	49 f4       	brne	.+18     	; 0x5a8 <ProcessMessage+0x88>
 596:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <_testHandler>
 59a:	f0 91 1a 01 	lds	r31, 0x011A	; 0x80011a <_testHandler+0x1>
 59e:	30 97       	sbiw	r30, 0x00	; 0
 5a0:	19 f0       	breq	.+6      	; 0x5a8 <ProcessMessage+0x88>
 5a2:	64 2f       	mov	r22, r20
 5a4:	cd 01       	movw	r24, r26
 5a6:	09 94       	ijmp
 5a8:	08 95       	ret

000005aa <HandleMessage>:
 5aa:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <msgType.1871>
 5ae:	91 11       	cpse	r25, r1
 5b0:	05 c0       	rjmp	.+10     	; 0x5bc <HandleMessage+0x12>
 5b2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <msgType.1871>
 5b6:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <msgLen.1872>
 5ba:	08 95       	ret
 5bc:	40 91 8f 00 	lds	r20, 0x008F	; 0x80008f <msgLen.1872>
 5c0:	41 11       	cpse	r20, r1
 5c2:	04 c0       	rjmp	.+8      	; 0x5cc <HandleMessage+0x22>
 5c4:	82 50       	subi	r24, 0x02	; 2
 5c6:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <msgLen.1872>
 5ca:	15 c0       	rjmp	.+42     	; 0x5f6 <HandleMessage+0x4c>
 5cc:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <bufferIndex.1870>
 5d0:	e4 17       	cp	r30, r20
 5d2:	98 f4       	brcc	.+38     	; 0x5fa <HandleMessage+0x50>
 5d4:	21 e0       	ldi	r18, 0x01	; 1
 5d6:	2e 0f       	add	r18, r30
 5d8:	20 93 8e 00 	sts	0x008E, r18	; 0x80008e <bufferIndex.1870>
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	e0 58       	subi	r30, 0x80	; 128
 5e0:	ff 4f       	sbci	r31, 0xFF	; 255
 5e2:	80 83       	st	Z, r24
 5e4:	42 13       	cpse	r20, r18
 5e6:	09 c0       	rjmp	.+18     	; 0x5fa <HandleMessage+0x50>
 5e8:	60 e8       	ldi	r22, 0x80	; 128
 5ea:	70 e0       	ldi	r23, 0x00	; 0
 5ec:	89 2f       	mov	r24, r25
 5ee:	0e 94 90 02 	call	0x520	; 0x520 <ProcessMessage>
 5f2:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <msgType.1871>
 5f6:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <bufferIndex.1870>
 5fa:	08 95       	ret

000005fc <SetInputOutput>:
 5fc:	cf 93       	push	r28
 5fe:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <outputRefreshCounter.1884>
 602:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <outputRefreshCounter.1884+0x1>
 606:	01 96       	adiw	r24, 0x01	; 1
 608:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <outputRefreshCounter.1884+0x1>
 60c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <outputRefreshCounter.1884>
 610:	83 70       	andi	r24, 0x03	; 3
 612:	99 27       	eor	r25, r25
 614:	89 2b       	or	r24, r25
 616:	21 f5       	brne	.+72     	; 0x660 <SetInputOutput+0x64>
 618:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <doorRefreshCounter.1885>
 61c:	8f 5f       	subi	r24, 0xFF	; 255
 61e:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <doorRefreshCounter.1885>
 622:	83 70       	andi	r24, 0x03	; 3
 624:	a8 2f       	mov	r26, r24
 626:	b0 e0       	ldi	r27, 0x00	; 0
 628:	aa 0f       	add	r26, r26
 62a:	bb 1f       	adc	r27, r27
 62c:	a8 5a       	subi	r26, 0xA8	; 168
 62e:	be 4f       	sbci	r27, 0xFE	; 254
 630:	11 96       	adiw	r26, 0x01	; 1
 632:	ec 91       	ld	r30, X
 634:	11 97       	sbiw	r26, 0x01	; 1
 636:	9c 91       	ld	r25, X
 638:	94 ff       	sbrs	r25, 4
 63a:	03 c0       	rjmp	.+6      	; 0x642 <SetInputOutput+0x46>
 63c:	94 e0       	ldi	r25, 0x04	; 4
 63e:	9e 1b       	sub	r25, r30
 640:	e9 2f       	mov	r30, r25
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	ed 58       	subi	r30, 0x8D	; 141
 646:	ff 4f       	sbci	r31, 0xFF	; 255
 648:	21 e0       	ldi	r18, 0x01	; 1
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	a9 01       	movw	r20, r18
 64e:	02 c0       	rjmp	.+4      	; 0x654 <SetInputOutput+0x58>
 650:	44 0f       	add	r20, r20
 652:	55 1f       	adc	r21, r21
 654:	8a 95       	dec	r24
 656:	e2 f7       	brpl	.-8      	; 0x650 <SetInputOutput+0x54>
 658:	ca 01       	movw	r24, r20
 65a:	90 81       	ld	r25, Z
 65c:	89 2b       	or	r24, r25
 65e:	85 bb       	out	0x15, r24	; 21
 660:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <buttonRefreshCounter.1886>
 664:	8f 5f       	subi	r24, 0xFF	; 255
 666:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <buttonRefreshCounter.1886>
 66a:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <displayCache>
 66e:	22 23       	and	r18, r18
 670:	01 f1       	breq	.+64     	; 0x6b2 <SetInputOutput+0xb6>
 672:	83 70       	andi	r24, 0x03	; 3
 674:	62 2f       	mov	r22, r18
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	40 e1       	ldi	r20, 0x10	; 16
 67a:	50 e0       	ldi	r21, 0x00	; 0
 67c:	08 2e       	mov	r0, r24
 67e:	02 c0       	rjmp	.+4      	; 0x684 <SetInputOutput+0x88>
 680:	44 0f       	add	r20, r20
 682:	55 1f       	adc	r21, r21
 684:	0a 94       	dec	r0
 686:	e2 f7       	brpl	.-8      	; 0x680 <SetInputOutput+0x84>
 688:	46 23       	and	r20, r22
 68a:	57 23       	and	r21, r23
 68c:	45 2b       	or	r20, r21
 68e:	11 f0       	breq	.+4      	; 0x694 <SetInputOutput+0x98>
 690:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <buttonLiftLed>
 694:	08 2e       	mov	r0, r24
 696:	02 c0       	rjmp	.+4      	; 0x69c <SetInputOutput+0xa0>
 698:	75 95       	asr	r23
 69a:	67 95       	ror	r22
 69c:	0a 94       	dec	r0
 69e:	e2 f7       	brpl	.-8      	; 0x698 <SetInputOutput+0x9c>
 6a0:	60 fd       	sbrc	r22, 0
 6a2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <buttonFloorLed>
 6a6:	82 2f       	mov	r24, r18
 6a8:	80 7f       	andi	r24, 0xF0	; 240
 6aa:	19 f0       	breq	.+6      	; 0x6b2 <SetInputOutput+0xb6>
 6ac:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <buttonLiftLed_on>
 6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <SetInputOutput+0xb8>
 6b2:	91 e0       	ldi	r25, 0x01	; 1
 6b4:	2f 70       	andi	r18, 0x0F	; 15
 6b6:	19 f0       	breq	.+6      	; 0x6be <SetInputOutput+0xc2>
 6b8:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <buttonFloorLed_On>
 6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <SetInputOutput+0xc4>
 6be:	21 e0       	ldi	r18, 0x01	; 1
 6c0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <liftPosDisplay_On>
 6c4:	81 11       	cpse	r24, r1
 6c6:	04 c0       	rjmp	.+8      	; 0x6d0 <SetInputOutput+0xd4>
 6c8:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <Elevator>
 6cc:	3f 73       	andi	r19, 0x3F	; 63
 6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <SetInputOutput+0xd6>
 6d0:	3f e3       	ldi	r19, 0x3F	; 63
 6d2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <liftDisplay7Seg_On>
 6d6:	81 11       	cpse	r24, r1
 6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <SetInputOutput+0xe4>
 6da:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <liftDisplay7Seg>
 6de:	01 c0       	rjmp	.+2      	; 0x6e2 <SetInputOutput+0xe6>
 6e0:	87 e0       	ldi	r24, 0x07	; 7
 6e2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <floorDisplayPort>
 6e6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <doorframe>
 6ea:	60 e4       	ldi	r22, 0x40	; 64
 6ec:	86 9f       	mul	r24, r22
 6ee:	a0 01       	movw	r20, r0
 6f0:	11 24       	eor	r1, r1
 6f2:	60 e8       	ldi	r22, 0x80	; 128
 6f4:	96 9f       	mul	r25, r22
 6f6:	c0 01       	movw	r24, r0
 6f8:	11 24       	eor	r1, r1
 6fa:	84 2b       	or	r24, r20
 6fc:	83 2b       	or	r24, r19
 6fe:	88 bb       	out	0x18, r24	; 24
 700:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <buttonLiftLed>
 704:	98 e0       	ldi	r25, 0x08	; 8
 706:	89 9f       	mul	r24, r25
 708:	a0 01       	movw	r20, r0
 70a:	11 24       	eor	r1, r1
 70c:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <buttonFloorLed>
 710:	30 e2       	ldi	r19, 0x20	; 32
 712:	93 9f       	mul	r25, r19
 714:	c0 01       	movw	r24, r0
 716:	11 24       	eor	r1, r1
 718:	84 2b       	or	r24, r20
 71a:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <floorDisplayPort>
 71e:	38 2b       	or	r19, r24
 720:	40 e8       	ldi	r20, 0x80	; 128
 722:	24 9f       	mul	r18, r20
 724:	c0 01       	movw	r24, r0
 726:	11 24       	eor	r1, r1
 728:	83 2b       	or	r24, r19
 72a:	8b bb       	out	0x1b, r24	; 27
 72c:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <USART_rxBufferOut>
 730:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USART_rxBufferIn>
 734:	98 17       	cp	r25, r24
 736:	b9 f0       	breq	.+46     	; 0x766 <SetInputOutput+0x16a>
 738:	0e 94 2b 01 	call	0x256	; 0x256 <EnterAtomic>
 73c:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <USART_rxBufferOut>
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	8e 0f       	add	r24, r30
 744:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <USART_rxBufferOut>
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	e8 5c       	subi	r30, 0xC8	; 200
 74c:	fe 4f       	sbci	r31, 0xFE	; 254
 74e:	c0 81       	ld	r28, Z
 750:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <USART_rxBufferOut>
 754:	8f 71       	andi	r24, 0x1F	; 31
 756:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <USART_rxBufferOut>
 75a:	0e 94 32 01 	call	0x264	; 0x264 <LeaveAtomic>
 75e:	8c 2f       	mov	r24, r28
 760:	0e 94 d5 02 	call	0x5aa	; 0x5aa <HandleMessage>
 764:	e3 cf       	rjmp	.-58     	; 0x72c <SetInputOutput+0x130>
 766:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <terminalRefreshCounter.1887>
 76a:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <terminalRefreshCounter.1887+0x1>
 76e:	9c 01       	movw	r18, r24
 770:	2f 5f       	subi	r18, 0xFF	; 255
 772:	3f 4f       	sbci	r19, 0xFF	; 255
 774:	30 93 7b 00 	sts	0x007B, r19	; 0x80007b <terminalRefreshCounter.1887+0x1>
 778:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <terminalRefreshCounter.1887>
 77c:	8f 3f       	cpi	r24, 0xFF	; 255
 77e:	9f 40       	sbci	r25, 0x0F	; 15
 780:	c9 f4       	brne	.+50     	; 0x7b4 <SetInputOutput+0x1b8>
 782:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <EnableStatusUpdate>
 786:	88 23       	and	r24, r24
 788:	a9 f0       	breq	.+42     	; 0x7b4 <SetInputOutput+0x1b8>
 78a:	84 e0       	ldi	r24, 0x04	; 4
 78c:	0e 94 0c 02 	call	0x418	; 0x418 <Usart_PutChar>
 790:	86 e0       	ldi	r24, 0x06	; 6
 792:	0e 94 0c 02 	call	0x418	; 0x418 <Usart_PutChar>
 796:	85 ea       	ldi	r24, 0xA5	; 165
 798:	0e 94 0c 02 	call	0x418	; 0x418 <Usart_PutChar>
 79c:	8a e5       	ldi	r24, 0x5A	; 90
 79e:	0e 94 0c 02 	call	0x418	; 0x418 <Usart_PutChar>
 7a2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <SystemState>
 7a6:	0e 94 0c 02 	call	0x418	; 0x418 <Usart_PutChar>
 7aa:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <OpenDoors>
 7ae:	cf 91       	pop	r28
 7b0:	0c 94 0c 02 	jmp	0x418	; 0x418 <Usart_PutChar>
 7b4:	cf 91       	pop	r28
 7b6:	08 95       	ret

000007b8 <InitializeStart>:
 7b8:	8a ec       	ldi	r24, 0xCA	; 202
 7ba:	0e 94 0c 02 	call	0x418	; 0x418 <Usart_PutChar>
 7be:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <liftPosDisplay_On>
 7c2:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <buttonLiftLed_on>
 7c6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <liftDisplay7Seg_On>
 7ca:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <buttonFloorLed_On>
 7ce:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <doorframe>
 7d2:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <liftDoorState+0x1>
 7d6:	80 e2       	ldi	r24, 0x20	; 32
 7d8:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <liftDoorState>
 7dc:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <liftDoorState+0x3>
 7e0:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <liftDoorState+0x2>
 7e4:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <liftDoorState+0x5>
 7e8:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <liftDoorState+0x4>
 7ec:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <liftDoorState+0x7>
 7f0:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <liftDoorState+0x6>
 7f4:	8f e1       	ldi	r24, 0x1F	; 31
 7f6:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Elevator>
 7fa:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Elevator+0x1>
 7fe:	0e 94 9b 01 	call	0x336	; 0x336 <InitializeCounter>
 802:	20 e0       	ldi	r18, 0x00	; 0
 804:	40 e0       	ldi	r20, 0x00	; 0
 806:	61 ec       	ldi	r22, 0xC1	; 193
 808:	81 e0       	ldi	r24, 0x01	; 1
 80a:	0e 94 10 02 	call	0x420	; 0x420 <SendEvent>
 80e:	8e ef       	ldi	r24, 0xFE	; 254
 810:	0e 94 0c 02 	call	0x418	; 0x418 <Usart_PutChar>
 814:	0e 94 60 01 	call	0x2c0	; 0x2c0 <DispatchEvent>
 818:	0e 94 fe 02 	call	0x5fc	; 0x5fc <SetInputOutput>
 81c:	fb cf       	rjmp	.-10     	; 0x814 <__DATA_REGION_LENGTH__+0x14>

0000081e <__vector_1>:
 81e:	1f 92       	push	r1
 820:	0f 92       	push	r0
 822:	0f b6       	in	r0, 0x3f	; 63
 824:	0f 92       	push	r0
 826:	11 24       	eor	r1, r1
 828:	2f 93       	push	r18
 82a:	3f 93       	push	r19
 82c:	4f 93       	push	r20
 82e:	5f 93       	push	r21
 830:	6f 93       	push	r22
 832:	7f 93       	push	r23
 834:	8f 93       	push	r24
 836:	9f 93       	push	r25
 838:	af 93       	push	r26
 83a:	bf 93       	push	r27
 83c:	ef 93       	push	r30
 83e:	ff 93       	push	r31
 840:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ButtonState>
 844:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <ButtonState+0x1>
 848:	91 60       	ori	r25, 0x01	; 1
 84a:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <ButtonState+0x1>
 84e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <ButtonState>
 852:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <ButtonState>
 856:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <ButtonState+0x1>
 85a:	20 e0       	ldi	r18, 0x00	; 0
 85c:	69 ec       	ldi	r22, 0xC9	; 201
 85e:	80 e1       	ldi	r24, 0x10	; 16
 860:	0e 94 10 02 	call	0x420	; 0x420 <SendEvent>
 864:	ff 91       	pop	r31
 866:	ef 91       	pop	r30
 868:	bf 91       	pop	r27
 86a:	af 91       	pop	r26
 86c:	9f 91       	pop	r25
 86e:	8f 91       	pop	r24
 870:	7f 91       	pop	r23
 872:	6f 91       	pop	r22
 874:	5f 91       	pop	r21
 876:	4f 91       	pop	r20
 878:	3f 91       	pop	r19
 87a:	2f 91       	pop	r18
 87c:	0f 90       	pop	r0
 87e:	0f be       	out	0x3f, r0	; 63
 880:	0f 90       	pop	r0
 882:	1f 90       	pop	r1
 884:	18 95       	reti

00000886 <__vector_13>:
 886:	1f 92       	push	r1
 888:	0f 92       	push	r0
 88a:	0f b6       	in	r0, 0x3f	; 63
 88c:	0f 92       	push	r0
 88e:	11 24       	eor	r1, r1
 890:	2f 93       	push	r18
 892:	3f 93       	push	r19
 894:	8f 93       	push	r24
 896:	9f 93       	push	r25
 898:	ef 93       	push	r30
 89a:	ff 93       	push	r31
 89c:	5f 9b       	sbis	0x0b, 7	; 11
 89e:	1e c0       	rjmp	.+60     	; 0x8dc <__vector_13+0x56>
 8a0:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USART_rxBufferIn>
 8a4:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <USART_rxBufferOut>
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	01 96       	adiw	r24, 0x01	; 1
 8ac:	8f 71       	andi	r24, 0x1F	; 31
 8ae:	99 27       	eor	r25, r25
 8b0:	30 e0       	ldi	r19, 0x00	; 0
 8b2:	82 17       	cp	r24, r18
 8b4:	93 07       	cpc	r25, r19
 8b6:	89 f0       	breq	.+34     	; 0x8da <__vector_13+0x54>
 8b8:	8c b1       	in	r24, 0x0c	; 12
 8ba:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <USART_rxBufferIn>
 8be:	91 e0       	ldi	r25, 0x01	; 1
 8c0:	9e 0f       	add	r25, r30
 8c2:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <USART_rxBufferIn>
 8c6:	f0 e0       	ldi	r31, 0x00	; 0
 8c8:	e8 5c       	subi	r30, 0xC8	; 200
 8ca:	fe 4f       	sbci	r31, 0xFE	; 254
 8cc:	80 83       	st	Z, r24
 8ce:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USART_rxBufferIn>
 8d2:	8f 71       	andi	r24, 0x1F	; 31
 8d4:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <USART_rxBufferIn>
 8d8:	e1 cf       	rjmp	.-62     	; 0x89c <__vector_13+0x16>
 8da:	57 98       	cbi	0x0a, 7	; 10
 8dc:	ff 91       	pop	r31
 8de:	ef 91       	pop	r30
 8e0:	9f 91       	pop	r25
 8e2:	8f 91       	pop	r24
 8e4:	3f 91       	pop	r19
 8e6:	2f 91       	pop	r18
 8e8:	0f 90       	pop	r0
 8ea:	0f be       	out	0x3f, r0	; 63
 8ec:	0f 90       	pop	r0
 8ee:	1f 90       	pop	r1
 8f0:	18 95       	reti

000008f2 <__vector_7>:
 8f2:	1f 92       	push	r1
 8f4:	0f 92       	push	r0
 8f6:	0f b6       	in	r0, 0x3f	; 63
 8f8:	0f 92       	push	r0
 8fa:	11 24       	eor	r1, r1
 8fc:	2f 93       	push	r18
 8fe:	3f 93       	push	r19
 900:	4f 93       	push	r20
 902:	5f 93       	push	r21
 904:	6f 93       	push	r22
 906:	7f 93       	push	r23
 908:	8f 93       	push	r24
 90a:	9f 93       	push	r25
 90c:	af 93       	push	r26
 90e:	bf 93       	push	r27
 910:	ef 93       	push	r30
 912:	ff 93       	push	r31
 914:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <ElevatorTick.1962>
 918:	8f 5f       	subi	r24, 0xFF	; 255
 91a:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <ElevatorTick.1962>
 91e:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__data_end>
 922:	9f 5f       	subi	r25, 0xFF	; 255
 924:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <__data_end>
 928:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <Elevator+0x2>
 92c:	0e 94 62 05 	call	0xac4	; 0xac4 <__udivmodqi4>
 930:	91 11       	cpse	r25, r1
 932:	14 c0       	rjmp	.+40     	; 0x95c <__vector_7+0x6a>
 934:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <Elevator>
 938:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <Elevator+0x1>
 93c:	96 17       	cp	r25, r22
 93e:	61 f0       	breq	.+24     	; 0x958 <__vector_7+0x66>
 940:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <Elevator+0x4>
 944:	89 0f       	add	r24, r25
 946:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Elevator>
 94a:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <Elevator+0x5>
 94e:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <Elevator+0x6>
 952:	30 97       	sbiw	r30, 0x00	; 0
 954:	09 f0       	breq	.+2      	; 0x958 <__vector_7+0x66>
 956:	09 95       	icall
 958:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <ElevatorTick.1962>
 95c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 960:	6c e0       	ldi	r22, 0x0C	; 12
 962:	0e 94 62 05 	call	0xac4	; 0xac4 <__udivmodqi4>
 966:	91 11       	cpse	r25, r1
 968:	04 c0       	rjmp	.+8      	; 0x972 <__vector_7+0x80>
 96a:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
 96e:	0e 94 4b 02 	call	0x496	; 0x496 <MakeDoorStates>
 972:	ff 91       	pop	r31
 974:	ef 91       	pop	r30
 976:	bf 91       	pop	r27
 978:	af 91       	pop	r26
 97a:	9f 91       	pop	r25
 97c:	8f 91       	pop	r24
 97e:	7f 91       	pop	r23
 980:	6f 91       	pop	r22
 982:	5f 91       	pop	r21
 984:	4f 91       	pop	r20
 986:	3f 91       	pop	r19
 988:	2f 91       	pop	r18
 98a:	0f 90       	pop	r0
 98c:	0f be       	out	0x3f, r0	; 63
 98e:	0f 90       	pop	r0
 990:	1f 90       	pop	r1
 992:	18 95       	reti

00000994 <StartTimer>:
 994:	ff 92       	push	r15
 996:	0f 93       	push	r16
 998:	1f 93       	push	r17
 99a:	cf 93       	push	r28
 99c:	df 93       	push	r29
 99e:	f0 90 35 01 	lds	r15, 0x0135	; 0x800135 <UsedTimers>
 9a2:	2f 2d       	mov	r18, r15
 9a4:	30 e0       	ldi	r19, 0x00	; 0
 9a6:	c0 e0       	ldi	r28, 0x00	; 0
 9a8:	d0 e0       	ldi	r29, 0x00	; 0
 9aa:	a9 01       	movw	r20, r18
 9ac:	0c 2e       	mov	r0, r28
 9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <StartTimer+0x20>
 9b0:	55 95       	asr	r21
 9b2:	47 95       	ror	r20
 9b4:	0a 94       	dec	r0
 9b6:	e2 f7       	brpl	.-8      	; 0x9b0 <StartTimer+0x1c>
 9b8:	40 fd       	sbrc	r20, 0
 9ba:	18 c0       	rjmp	.+48     	; 0x9ec <StartTimer+0x58>
 9bc:	8c 01       	movw	r16, r24
 9be:	0e 94 2b 01 	call	0x256	; 0x256 <EnterAtomic>
 9c2:	21 e0       	ldi	r18, 0x01	; 1
 9c4:	30 e0       	ldi	r19, 0x00	; 0
 9c6:	0c 2e       	mov	r0, r28
 9c8:	01 c0       	rjmp	.+2      	; 0x9cc <StartTimer+0x38>
 9ca:	22 0f       	add	r18, r18
 9cc:	0a 94       	dec	r0
 9ce:	ea f7       	brpl	.-6      	; 0x9ca <StartTimer+0x36>
 9d0:	2f 29       	or	r18, r15
 9d2:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <UsedTimers>
 9d6:	fe 01       	movw	r30, r28
 9d8:	ee 0f       	add	r30, r30
 9da:	ff 1f       	adc	r31, r31
 9dc:	eb 5d       	subi	r30, 0xDB	; 219
 9de:	fe 4f       	sbci	r31, 0xFE	; 254
 9e0:	11 83       	std	Z+1, r17	; 0x01
 9e2:	00 83       	st	Z, r16
 9e4:	0e 94 32 01 	call	0x264	; 0x264 <LeaveAtomic>
 9e8:	8c 2f       	mov	r24, r28
 9ea:	05 c0       	rjmp	.+10     	; 0x9f6 <StartTimer+0x62>
 9ec:	21 96       	adiw	r28, 0x01	; 1
 9ee:	c8 30       	cpi	r28, 0x08	; 8
 9f0:	d1 05       	cpc	r29, r1
 9f2:	d9 f6       	brne	.-74     	; 0x9aa <StartTimer+0x16>
 9f4:	8f ef       	ldi	r24, 0xFF	; 255
 9f6:	df 91       	pop	r29
 9f8:	cf 91       	pop	r28
 9fa:	1f 91       	pop	r17
 9fc:	0f 91       	pop	r16
 9fe:	ff 90       	pop	r15
 a00:	08 95       	ret

00000a02 <__vector_10>:
 a02:	1f 92       	push	r1
 a04:	0f 92       	push	r0
 a06:	0f b6       	in	r0, 0x3f	; 63
 a08:	0f 92       	push	r0
 a0a:	11 24       	eor	r1, r1
 a0c:	cf 92       	push	r12
 a0e:	df 92       	push	r13
 a10:	ff 92       	push	r15
 a12:	0f 93       	push	r16
 a14:	1f 93       	push	r17
 a16:	2f 93       	push	r18
 a18:	3f 93       	push	r19
 a1a:	4f 93       	push	r20
 a1c:	5f 93       	push	r21
 a1e:	6f 93       	push	r22
 a20:	7f 93       	push	r23
 a22:	8f 93       	push	r24
 a24:	9f 93       	push	r25
 a26:	af 93       	push	r26
 a28:	bf 93       	push	r27
 a2a:	cf 93       	push	r28
 a2c:	df 93       	push	r29
 a2e:	ef 93       	push	r30
 a30:	ff 93       	push	r31
 a32:	05 e2       	ldi	r16, 0x25	; 37
 a34:	11 e0       	ldi	r17, 0x01	; 1
 a36:	c0 e0       	ldi	r28, 0x00	; 0
 a38:	d0 e0       	ldi	r29, 0x00	; 0
 a3a:	cc 24       	eor	r12, r12
 a3c:	c3 94       	inc	r12
 a3e:	d1 2c       	mov	r13, r1
 a40:	f0 90 35 01 	lds	r15, 0x0135	; 0x800135 <UsedTimers>
 a44:	8f 2d       	mov	r24, r15
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	0c 2e       	mov	r0, r28
 a4a:	02 c0       	rjmp	.+4      	; 0xa50 <__vector_10+0x4e>
 a4c:	95 95       	asr	r25
 a4e:	87 95       	ror	r24
 a50:	0a 94       	dec	r0
 a52:	e2 f7       	brpl	.-8      	; 0xa4c <__vector_10+0x4a>
 a54:	80 ff       	sbrs	r24, 0
 a56:	18 c0       	rjmp	.+48     	; 0xa88 <__vector_10+0x86>
 a58:	f8 01       	movw	r30, r16
 a5a:	80 81       	ld	r24, Z
 a5c:	91 81       	ldd	r25, Z+1	; 0x01
 a5e:	01 97       	sbiw	r24, 0x01	; 1
 a60:	91 83       	std	Z+1, r25	; 0x01
 a62:	80 83       	st	Z, r24
 a64:	89 2b       	or	r24, r25
 a66:	81 f4       	brne	.+32     	; 0xa88 <__vector_10+0x86>
 a68:	20 e0       	ldi	r18, 0x00	; 0
 a6a:	40 e0       	ldi	r20, 0x00	; 0
 a6c:	68 ec       	ldi	r22, 0xC8	; 200
 a6e:	81 e0       	ldi	r24, 0x01	; 1
 a70:	0e 94 10 02 	call	0x420	; 0x420 <SendEvent>
 a74:	c6 01       	movw	r24, r12
 a76:	0c 2e       	mov	r0, r28
 a78:	01 c0       	rjmp	.+2      	; 0xa7c <__vector_10+0x7a>
 a7a:	88 0f       	add	r24, r24
 a7c:	0a 94       	dec	r0
 a7e:	ea f7       	brpl	.-6      	; 0xa7a <__vector_10+0x78>
 a80:	80 95       	com	r24
 a82:	f8 22       	and	r15, r24
 a84:	f0 92 35 01 	sts	0x0135, r15	; 0x800135 <UsedTimers>
 a88:	21 96       	adiw	r28, 0x01	; 1
 a8a:	0e 5f       	subi	r16, 0xFE	; 254
 a8c:	1f 4f       	sbci	r17, 0xFF	; 255
 a8e:	c8 30       	cpi	r28, 0x08	; 8
 a90:	d1 05       	cpc	r29, r1
 a92:	b1 f6       	brne	.-84     	; 0xa40 <__vector_10+0x3e>
 a94:	ff 91       	pop	r31
 a96:	ef 91       	pop	r30
 a98:	df 91       	pop	r29
 a9a:	cf 91       	pop	r28
 a9c:	bf 91       	pop	r27
 a9e:	af 91       	pop	r26
 aa0:	9f 91       	pop	r25
 aa2:	8f 91       	pop	r24
 aa4:	7f 91       	pop	r23
 aa6:	6f 91       	pop	r22
 aa8:	5f 91       	pop	r21
 aaa:	4f 91       	pop	r20
 aac:	3f 91       	pop	r19
 aae:	2f 91       	pop	r18
 ab0:	1f 91       	pop	r17
 ab2:	0f 91       	pop	r16
 ab4:	ff 90       	pop	r15
 ab6:	df 90       	pop	r13
 ab8:	cf 90       	pop	r12
 aba:	0f 90       	pop	r0
 abc:	0f be       	out	0x3f, r0	; 63
 abe:	0f 90       	pop	r0
 ac0:	1f 90       	pop	r1
 ac2:	18 95       	reti

00000ac4 <__udivmodqi4>:
 ac4:	99 1b       	sub	r25, r25
 ac6:	79 e0       	ldi	r23, 0x09	; 9
 ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__udivmodqi4_ep>

00000aca <__udivmodqi4_loop>:
 aca:	99 1f       	adc	r25, r25
 acc:	96 17       	cp	r25, r22
 ace:	08 f0       	brcs	.+2      	; 0xad2 <__udivmodqi4_ep>
 ad0:	96 1b       	sub	r25, r22

00000ad2 <__udivmodqi4_ep>:
 ad2:	88 1f       	adc	r24, r24
 ad4:	7a 95       	dec	r23
 ad6:	c9 f7       	brne	.-14     	; 0xaca <__udivmodqi4_loop>
 ad8:	80 95       	com	r24
 ada:	08 95       	ret

00000adc <_exit>:
 adc:	f8 94       	cli

00000ade <__stop_program>:
 ade:	ff cf       	rjmp	.-2      	; 0xade <__stop_program>
