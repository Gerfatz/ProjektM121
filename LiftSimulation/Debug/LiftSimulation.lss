
LiftSimulation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000990  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00000990  00000a24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e8  00800086  00800086  00000a4a  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000aac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ec3  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb6  00000000  00000000  00002b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bdb  00000000  00000000  000036e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004ac  00000000  00000000  000042c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e70  00000000  00000000  00004770  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001178  00000000  00000000  000055e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00006758  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 08 04 	jmp	0x810	; 0x810 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  8a:	0c 94 c6 04 	jmp	0x98c	; 0x98c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TestFunction>:
	// letzte Funktion die aufgerufen wird!
	InitializeStart();
}

void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	if( data[0] == 0 )
  96:	fc 01       	movw	r30, r24
  98:	40 81       	ld	r20, Z
  9a:	41 11       	cpse	r20, r1
  9c:	09 c0       	rjmp	.+18     	; 0xb0 <TestFunction+0x1e>
  9e:	c9 e7       	ldi	r28, 0x79	; 121
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	88 e4       	ldi	r24, 0x48	; 72
	{
		char *ch = "Hello-World\n";
		while( *ch != 0 )
		{
			Usart_PutChar(*ch++);
  a4:	0e 94 9b 01 	call	0x336	; 0x336 <Usart_PutChar>
void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
	if( data[0] == 0 )
	{
		char *ch = "Hello-World\n";
		while( *ch != 0 )
  a8:	89 91       	ld	r24, Y+
  aa:	81 11       	cpse	r24, r1
  ac:	fb cf       	rjmp	.-10     	; 0xa4 <TestFunction+0x12>
  ae:	05 c0       	rjmp	.+10     	; 0xba <TestFunction+0x28>
			Usart_PutChar(*ch++);
		}
	}
	else if( data[0] != 0)
	{
		SendEvent(SignalSourceApp, Message_MoveTo, data[0], 0);
  b0:	20 e0       	ldi	r18, 0x00	; 0
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	80 e2       	ldi	r24, 0x20	; 32
  b6:	0e 94 9f 01 	call	0x33e	; 0x33e <SendEvent>
	}
}
  ba:	df 91       	pop	r29
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <main>:

void TestFunction(uint8_t* data, uint8_t nrOfBytes);

int main(void)
{
    InitializePorts();
  c0:	0e 94 8d 01 	call	0x31a	; 0x31a <InitializePorts>
	Usart_Init();
  c4:	0e 94 84 01 	call	0x308	; 0x308 <Usart_Init>
	RegisterTestHandler( TestFunction );
  c8:	89 e4       	ldi	r24, 0x49	; 73
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 7f 01 	call	0x2fe	; 0x2fe <RegisterTestHandler>
	RegisterFsm(&_motorCtrl.fsm);
  d0:	80 e6       	ldi	r24, 0x60	; 96
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <RegisterFsm>
	// letzte Funktion die aufgerufen wird!
	InitializeStart();
  d8:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <InitializeStart>
}
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	08 95       	ret

000000e2 <NotifyCalibrationDone>:
	.target = Floor0,
	.fsm  = { .Next = 0, .CurrentState = MotorCtrl_Initializing, .RxMask = 0xFF },
};

void NotifyCalibrationDone(uint8_t currentPos, uint8_t targetPostion)
{
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	d8 2f       	mov	r29, r24
  ea:	16 2f       	mov	r17, r22
	FloorType floor = (FloorType)currentPos/16;
  ec:	c8 2f       	mov	r28, r24
  ee:	c2 95       	swap	r28
  f0:	cf 70       	andi	r28, 0x0F	; 15
	SetDisplay(floor);
  f2:	8c 2f       	mov	r24, r28
  f4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SetDisplay>
	if( ((currentPos %floor) == 0 ) && floor == Floor0 )
  f8:	8d 2f       	mov	r24, r29
  fa:	6c 2f       	mov	r22, r28
  fc:	0e 94 ba 04 	call	0x974	; 0x974 <__udivmodqi4>
 100:	91 11       	cpse	r25, r1
 102:	08 c0       	rjmp	.+16     	; 0x114 <NotifyCalibrationDone+0x32>
 104:	c1 11       	cpse	r28, r1
 106:	06 c0       	rjmp	.+12     	; 0x114 <NotifyCalibrationDone+0x32>
	{
		SendEvent(SignalSourceEnvironment, LiftCalibrated, currentPos, targetPostion);
 108:	21 2f       	mov	r18, r17
 10a:	4d 2f       	mov	r20, r29
 10c:	62 ec       	ldi	r22, 0xC2	; 194
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	0e 94 9f 01 	call	0x33e	; 0x33e <SendEvent>
	}
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	08 95       	ret

0000011c <OnElevatorPositionChanged>:
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
	}
}

void OnElevatorPositionChanged(uint8_t currentPos, uint8_t targetPos)
{
 11c:	26 2f       	mov	r18, r22
	SendEvent(SignalSourceElevator, Message_PosChanged, currentPos, targetPos);
 11e:	48 2f       	mov	r20, r24
 120:	62 e0       	ldi	r22, 0x02	; 2
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	0e 94 9f 01 	call	0x33e	; 0x33e <SendEvent>
 128:	08 95       	ret

0000012a <MotorCtrl_Initializing>:
	}
}

void MotorCtrl_Initializing(Message* msg)
{
	if( msg->Id == LiftStarted)
 12a:	fc 01       	movw	r30, r24
 12c:	81 81       	ldd	r24, Z+1	; 0x01
 12e:	81 3c       	cpi	r24, 0xC1	; 193
 130:	29 f4       	brne	.+10     	; 0x13c <MotorCtrl_Initializing+0x12>
	{
		CalibrateElevatorPosition(NotifyCalibrationDone);
 132:	81 e7       	ldi	r24, 0x71	; 113
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 78 01 	call	0x2f0	; 0x2f0 <CalibrateElevatorPosition>
		return;
 13a:	08 95       	ret
	}
	if( msg->Id == LiftCalibrated )
 13c:	82 3c       	cpi	r24, 0xC2	; 194
 13e:	49 f4       	brne	.+18     	; 0x152 <MotorCtrl_Initializing+0x28>
	{
		SetDisplay(Floor0);
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SetDisplay>
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 146:	64 ec       	ldi	r22, 0xC4	; 196
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	80 e6       	ldi	r24, 0x60	; 96
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 ef 00 	call	0x1de	; 0x1de <SetState>
 152:	08 95       	ret

00000154 <MotorCtrl_Moving>:
	}
}


void MotorCtrl_Moving(Message* msg)
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24
	SetDisplay((FloorType)(msg->MsgParamLow/POS_STEPS_PER_FLOOR));
 15a:	8a 81       	ldd	r24, Y+2	; 0x02
 15c:	82 95       	swap	r24
 15e:	8f 70       	andi	r24, 0x0F	; 15
 160:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SetDisplay>
	if( msg->Id == Message_PosChanged && msg->MsgParamLow == msg->MsgParamHigh)
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	61 f4       	brne	.+24     	; 0x182 <MotorCtrl_Moving+0x2e>
 16a:	8a 81       	ldd	r24, Y+2	; 0x02
 16c:	9b 81       	ldd	r25, Y+3	; 0x03
 16e:	89 13       	cpse	r24, r25
 170:	08 c0       	rjmp	.+16     	; 0x182 <MotorCtrl_Moving+0x2e>
	{
		_motorCtrl.target = (FloorType)msg->MsgParamLow;		
 172:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 176:	64 ec       	ldi	r22, 0xC4	; 196
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	80 e6       	ldi	r24, 0x60	; 96
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 ef 00 	call	0x1de	; 0x1de <SetState>
	}	
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <MotorCtrl_Stopped>:
	SendEvent(SignalSourceElevator, Message_PosChanged, currentPos, targetPos);
}


void MotorCtrl_Stopped(Message* msg)
{
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
	if( msg->Id == Message_MoveTo && msg->MsgParamLow < 4)
 18c:	fc 01       	movw	r30, r24
 18e:	21 81       	ldd	r18, Z+1	; 0x01
 190:	21 30       	cpi	r18, 0x01	; 1
 192:	91 f4       	brne	.+36     	; 0x1b8 <MotorCtrl_Stopped+0x30>
 194:	82 81       	ldd	r24, Z+2	; 0x02
 196:	84 30       	cpi	r24, 0x04	; 4
 198:	78 f4       	brcc	.+30     	; 0x1b8 <MotorCtrl_Stopped+0x30>
	{
		_motorCtrl.target = (FloorType)msg->MsgParamLow;
 19a:	c0 e6       	ldi	r28, 0x60	; 96
 19c:	d0 e0       	ldi	r29, 0x00	; 0
 19e:	8e 83       	std	Y+6, r24	; 0x06
		SetState(&_motorCtrl.fsm, MotorCtrl_Moving);
 1a0:	6a ea       	ldi	r22, 0xAA	; 170
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	ce 01       	movw	r24, r28
 1a6:	0e 94 ef 00 	call	0x1de	; 0x1de <SetState>
		MoveElevator(_motorCtrl.target * POS_STEPS_PER_FLOOR, OnElevatorPositionChanged );
 1aa:	8e 81       	ldd	r24, Y+6	; 0x06
 1ac:	6e e8       	ldi	r22, 0x8E	; 142
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	82 95       	swap	r24
 1b2:	80 7f       	andi	r24, 0xF0	; 240
 1b4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <MoveElevator>
	}
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <EnterAtomic>:
 1be:	f8 94       	cli
 1c0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <enterAtomicNesting>
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <enterAtomicNesting>
 1ca:	08 95       	ret

000001cc <LeaveAtomic>:
 1cc:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <enterAtomicNesting>
 1d0:	81 50       	subi	r24, 0x01	; 1
 1d2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <enterAtomicNesting>
 1d6:	81 11       	cpse	r24, r1
 1d8:	01 c0       	rjmp	.+2      	; 0x1dc <LeaveAtomic+0x10>
 1da:	78 94       	sei
 1dc:	08 95       	ret

000001de <SetState>:
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	ec 01       	movw	r28, r24
 1e8:	8b 01       	movw	r16, r22
 1ea:	0e 94 df 00 	call	0x1be	; 0x1be <EnterAtomic>
 1ee:	1c 83       	std	Y+4, r17	; 0x04
 1f0:	0b 83       	std	Y+3, r16	; 0x03
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <LeaveAtomic>

000001fe <RegisterFsm>:
 1fe:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <anchor>
 202:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <anchor+0x1>
 206:	a7 e6       	ldi	r26, 0x67	; 103
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	e7 36       	cpi	r30, 0x67	; 103
 20e:	f2 07       	cpc	r31, r18
 210:	29 f0       	breq	.+10     	; 0x21c <RegisterFsm+0x1e>
 212:	df 01       	movw	r26, r30
 214:	01 90       	ld	r0, Z+
 216:	f0 81       	ld	r31, Z
 218:	e0 2d       	mov	r30, r0
 21a:	f7 cf       	rjmp	.-18     	; 0x20a <RegisterFsm+0xc>
 21c:	8d 93       	st	X+, r24
 21e:	9c 93       	st	X, r25
 220:	dc 01       	movw	r26, r24
 222:	ed 93       	st	X+, r30
 224:	fc 93       	st	X, r31
 226:	08 95       	ret

00000228 <DispatchEvent>:
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	0e 94 df 00 	call	0x1be	; 0x1be <EnterAtomic>
 234:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <msgQ_out>
 238:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <msgQ_in>
 23c:	98 17       	cp	r25, r24
 23e:	59 f0       	breq	.+22     	; 0x256 <DispatchEvent+0x2e>
 240:	84 e0       	ldi	r24, 0x04	; 4
 242:	98 9f       	mul	r25, r24
 244:	e0 01       	movw	r28, r0
 246:	11 24       	eor	r1, r1
 248:	cf 55       	subi	r28, 0x5F	; 95
 24a:	df 4f       	sbci	r29, 0xFF	; 255
 24c:	9f 5f       	subi	r25, 0xFF	; 255
 24e:	9f 71       	andi	r25, 0x1F	; 31
 250:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <msgQ_out>
 254:	02 c0       	rjmp	.+4      	; 0x25a <DispatchEvent+0x32>
 256:	c0 e0       	ldi	r28, 0x00	; 0
 258:	d0 e0       	ldi	r29, 0x00	; 0
 25a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LeaveAtomic>
 25e:	20 97       	sbiw	r28, 0x00	; 0
 260:	c9 f0       	breq	.+50     	; 0x294 <DispatchEvent+0x6c>
 262:	00 91 67 00 	lds	r16, 0x0067	; 0x800067 <anchor>
 266:	10 91 68 00 	lds	r17, 0x0068	; 0x800068 <anchor+0x1>
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	07 36       	cpi	r16, 0x67	; 103
 26e:	1f 07       	cpc	r17, r31
 270:	89 f0       	breq	.+34     	; 0x294 <DispatchEvent+0x6c>
 272:	d8 01       	movw	r26, r16
 274:	12 96       	adiw	r26, 0x02	; 2
 276:	9c 91       	ld	r25, X
 278:	12 97       	sbiw	r26, 0x02	; 2
 27a:	88 81       	ld	r24, Y
 27c:	89 23       	and	r24, r25
 27e:	31 f0       	breq	.+12     	; 0x28c <DispatchEvent+0x64>
 280:	13 96       	adiw	r26, 0x03	; 3
 282:	ed 91       	ld	r30, X+
 284:	fc 91       	ld	r31, X
 286:	14 97       	sbiw	r26, 0x04	; 4
 288:	ce 01       	movw	r24, r28
 28a:	09 95       	icall
 28c:	f8 01       	movw	r30, r16
 28e:	00 81       	ld	r16, Z
 290:	11 81       	ldd	r17, Z+1	; 0x01
 292:	eb cf       	rjmp	.-42     	; 0x26a <DispatchEvent+0x42>
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	08 95       	ret

0000029e <InitializeCounter>:
 29e:	12 be       	out	0x32, r1	; 50
 2a0:	8b e0       	ldi	r24, 0x0B	; 11
 2a2:	83 bf       	out	0x33, r24	; 51
 2a4:	8d e7       	ldi	r24, 0x7D	; 125
 2a6:	8c bf       	out	0x3c, r24	; 60
 2a8:	89 b7       	in	r24, 0x39	; 57
 2aa:	82 60       	ori	r24, 0x02	; 2
 2ac:	89 bf       	out	0x39, r24	; 57
 2ae:	80 e8       	ldi	r24, 0x80	; 128
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	9b bd       	out	0x2b, r25	; 43
 2b4:	8a bd       	out	0x2a, r24	; 42
 2b6:	1d bc       	out	0x2d, r1	; 45
 2b8:	1c bc       	out	0x2c, r1	; 44
 2ba:	1f bc       	out	0x2f, r1	; 47
 2bc:	8d e0       	ldi	r24, 0x0D	; 13
 2be:	8e bd       	out	0x2e, r24	; 46
 2c0:	89 b7       	in	r24, 0x39	; 57
 2c2:	80 61       	ori	r24, 0x10	; 16
 2c4:	89 bf       	out	0x39, r24	; 57
 2c6:	08 95       	ret

000002c8 <MoveElevator>:
 2c8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Elevator+0x1>
 2cc:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Elevator+0x4>
 2d0:	70 93 72 00 	sts	0x0072, r23	; 0x800072 <Elevator+0x6>
 2d4:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <Elevator+0x5>
 2d8:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <Elevator>
 2dc:	98 17       	cp	r25, r24
 2de:	10 f4       	brcc	.+4      	; 0x2e4 <MoveElevator+0x1c>
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	03 c0       	rjmp	.+6      	; 0x2ea <MoveElevator+0x22>
 2e4:	89 17       	cp	r24, r25
 2e6:	18 f4       	brcc	.+6      	; 0x2ee <MoveElevator+0x26>
 2e8:	8f ef       	ldi	r24, 0xFF	; 255
 2ea:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Elevator+0x4>
 2ee:	08 95       	ret

000002f0 <CalibrateElevatorPosition>:
 2f0:	bc 01       	movw	r22, r24
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <MoveElevator>

000002f8 <SetDisplay>:
 2f8:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <liftDisplay7Seg>
 2fc:	08 95       	ret

000002fe <RegisterTestHandler>:
 2fe:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <_testHandler+0x1>
 302:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_testHandler>
 306:	08 95       	ret

00000308 <Usart_Init>:
 308:	10 bc       	out	0x20, r1	; 32
 30a:	8c e0       	ldi	r24, 0x0C	; 12
 30c:	89 b9       	out	0x09, r24	; 9
 30e:	86 e8       	ldi	r24, 0x86	; 134
 310:	80 bd       	out	0x20, r24	; 32
 312:	88 e9       	ldi	r24, 0x98	; 152
 314:	8a b9       	out	0x0a, r24	; 10
 316:	78 94       	sei
 318:	08 95       	ret

0000031a <InitializePorts>:
 31a:	8f ef       	ldi	r24, 0xFF	; 255
 31c:	87 bb       	out	0x17, r24	; 23
 31e:	84 bb       	out	0x14, r24	; 20
 320:	8a bb       	out	0x1a, r24	; 26
 322:	11 ba       	out	0x11, r1	; 17
 324:	0e 94 84 01 	call	0x308	; 0x308 <Usart_Init>
 328:	85 b7       	in	r24, 0x35	; 53
 32a:	83 60       	ori	r24, 0x03	; 3
 32c:	85 bf       	out	0x35, r24	; 53
 32e:	8b b7       	in	r24, 0x3b	; 59
 330:	80 64       	ori	r24, 0x40	; 64
 332:	8b bf       	out	0x3b, r24	; 59
 334:	08 95       	ret

00000336 <Usart_PutChar>:
 336:	8c b9       	out	0x0c, r24	; 12
 338:	5d 9b       	sbis	0x0b, 5	; 11
 33a:	fe cf       	rjmp	.-4      	; 0x338 <Usart_PutChar+0x2>
 33c:	08 95       	ret

0000033e <SendEvent>:
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	c8 2f       	mov	r28, r24
 348:	06 2f       	mov	r16, r22
 34a:	d4 2f       	mov	r29, r20
 34c:	12 2f       	mov	r17, r18
 34e:	0e 94 df 00 	call	0x1be	; 0x1be <EnterAtomic>
 352:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <msgQ_in>
 356:	e8 2f       	mov	r30, r24
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	af 01       	movw	r20, r30
 35c:	4f 5f       	subi	r20, 0xFF	; 255
 35e:	5f 4f       	sbci	r21, 0xFF	; 255
 360:	4f 71       	andi	r20, 0x1F	; 31
 362:	55 27       	eor	r21, r21
 364:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <msgQ_out>
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	42 17       	cp	r20, r18
 36c:	53 07       	cpc	r21, r19
 36e:	71 f4       	brne	.+28     	; 0x38c <SendEvent+0x4e>
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	0e 94 9b 01 	call	0x336	; 0x336 <Usart_PutChar>
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	0e 94 9b 01 	call	0x336	; 0x336 <Usart_PutChar>
 37c:	8f ef       	ldi	r24, 0xFF	; 255
 37e:	0e 94 9b 01 	call	0x336	; 0x336 <Usart_PutChar>
 382:	8e ed       	ldi	r24, 0xDE	; 222
 384:	0e 94 9b 01 	call	0x336	; 0x336 <Usart_PutChar>
 388:	8d ea       	ldi	r24, 0xAD	; 173
 38a:	f9 cf       	rjmp	.-14     	; 0x37e <SendEvent+0x40>
 38c:	ee 0f       	add	r30, r30
 38e:	ff 1f       	adc	r31, r31
 390:	ee 0f       	add	r30, r30
 392:	ff 1f       	adc	r31, r31
 394:	ef 55       	subi	r30, 0x5F	; 95
 396:	ff 4f       	sbci	r31, 0xFF	; 255
 398:	01 83       	std	Z+1, r16	; 0x01
 39a:	13 83       	std	Z+3, r17	; 0x03
 39c:	d2 83       	std	Z+2, r29	; 0x02
 39e:	c0 83       	st	Z, r28
 3a0:	8f 5f       	subi	r24, 0xFF	; 255
 3a2:	8f 71       	andi	r24, 0x1F	; 31
 3a4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <msgQ_in>
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
 3ae:	0f 91       	pop	r16
 3b0:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <LeaveAtomic>

000003b4 <MakeDoorStates>:
 3b4:	df 92       	push	r13
 3b6:	ef 92       	push	r14
 3b8:	ff 92       	push	r15
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	c6 e6       	ldi	r28, 0x66	; 102
 3c4:	d1 e0       	ldi	r29, 0x01	; 1
 3c6:	00 e0       	ldi	r16, 0x00	; 0
 3c8:	10 e0       	ldi	r17, 0x00	; 0
 3ca:	ee 24       	eor	r14, r14
 3cc:	e3 94       	inc	r14
 3ce:	f1 2c       	mov	r15, r1
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	81 11       	cpse	r24, r1
 3d4:	24 c0       	rjmp	.+72     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3d6:	48 81       	ld	r20, Y
 3d8:	40 ff       	sbrs	r20, 0
 3da:	23 c0       	rjmp	.+70     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3dc:	4e 7f       	andi	r20, 0xFE	; 254
 3de:	48 83       	st	Y, r20
 3e0:	20 2f       	mov	r18, r16
 3e2:	65 ec       	ldi	r22, 0xC5	; 197
 3e4:	80 e1       	ldi	r24, 0x10	; 16
 3e6:	0e 94 9f 01 	call	0x33e	; 0x33e <SendEvent>
 3ea:	88 81       	ld	r24, Y
 3ec:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <OpenDoors>
 3f0:	84 ff       	sbrs	r24, 4
 3f2:	0a c0       	rjmp	.+20     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3f4:	97 01       	movw	r18, r14
 3f6:	00 2e       	mov	r0, r16
 3f8:	01 c0       	rjmp	.+2      	; 0x3fc <MakeDoorStates+0x48>
 3fa:	22 0f       	add	r18, r18
 3fc:	0a 94       	dec	r0
 3fe:	ea f7       	brpl	.-6      	; 0x3fa <MakeDoorStates+0x46>
 400:	24 2b       	or	r18, r20
 402:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <OpenDoors>
 406:	0d c0       	rjmp	.+26     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 408:	c7 01       	movw	r24, r14
 40a:	00 2e       	mov	r0, r16
 40c:	01 c0       	rjmp	.+2      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40e:	88 0f       	add	r24, r24
 410:	0a 94       	dec	r0
 412:	ea f7       	brpl	.-6      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 414:	80 95       	com	r24
 416:	84 23       	and	r24, r20
 418:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <OpenDoors>
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41e:	81 50       	subi	r24, 0x01	; 1
 420:	89 83       	std	Y+1, r24	; 0x01
 422:	0f 5f       	subi	r16, 0xFF	; 255
 424:	1f 4f       	sbci	r17, 0xFF	; 255
 426:	22 96       	adiw	r28, 0x02	; 2
 428:	04 30       	cpi	r16, 0x04	; 4
 42a:	11 05       	cpc	r17, r1
 42c:	89 f6       	brne	.-94     	; 0x3d0 <MakeDoorStates+0x1c>
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	ff 90       	pop	r15
 438:	ef 90       	pop	r14
 43a:	df 90       	pop	r13
 43c:	08 95       	ret

0000043e <ProcessMessage>:
 43e:	db 01       	movw	r26, r22
 440:	82 30       	cpi	r24, 0x02	; 2
 442:	b1 f5       	brne	.+108    	; 0x4b0 <ProcessMessage+0x72>
 444:	8c 91       	ld	r24, X
 446:	98 2f       	mov	r25, r24
 448:	90 72       	andi	r25, 0x20	; 32
 44a:	28 2f       	mov	r18, r24
 44c:	20 76       	andi	r18, 0x60	; 96
 44e:	d9 f1       	breq	.+118    	; 0x4c6 <ProcessMessage+0x88>
 450:	21 e0       	ldi	r18, 0x01	; 1
 452:	38 2f       	mov	r19, r24
 454:	30 71       	andi	r19, 0x10	; 16
 456:	84 ff       	sbrs	r24, 4
 458:	20 e0       	ldi	r18, 0x00	; 0
 45a:	99 23       	and	r25, r25
 45c:	11 f0       	breq	.+4      	; 0x462 <ProcessMessage+0x24>
 45e:	94 e0       	ldi	r25, 0x04	; 4
 460:	01 c0       	rjmp	.+2      	; 0x464 <ProcessMessage+0x26>
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	8f 70       	andi	r24, 0x0F	; 15
 466:	89 0f       	add	r24, r25
 468:	41 e0       	ldi	r20, 0x01	; 1
 46a:	50 e0       	ldi	r21, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <ProcessMessage+0x34>
 46e:	44 0f       	add	r20, r20
 470:	55 1f       	adc	r21, r21
 472:	8a 95       	dec	r24
 474:	e2 f7       	brpl	.-8      	; 0x46e <ProcessMessage+0x30>
 476:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <ButtonState>
 47a:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <ButtonState+0x1>
 47e:	ba 01       	movw	r22, r20
 480:	60 95       	com	r22
 482:	70 95       	com	r23
 484:	86 23       	and	r24, r22
 486:	97 23       	and	r25, r23
 488:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <ButtonState+0x1>
 48c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <ButtonState>
 490:	33 23       	and	r19, r19
 492:	51 f0       	breq	.+20     	; 0x4a8 <ProcessMessage+0x6a>
 494:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <ButtonState>
 498:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <ButtonState+0x1>
 49c:	84 2b       	or	r24, r20
 49e:	95 2b       	or	r25, r21
 4a0:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <ButtonState+0x1>
 4a4:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <ButtonState>
 4a8:	67 ec       	ldi	r22, 0xC7	; 199
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	0c 94 9f 01 	jmp	0x33e	; 0x33e <SendEvent>
 4b0:	83 30       	cpi	r24, 0x03	; 3
 4b2:	49 f4       	brne	.+18     	; 0x4c6 <ProcessMessage+0x88>
 4b4:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <_testHandler>
 4b8:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <_testHandler+0x1>
 4bc:	30 97       	sbiw	r30, 0x00	; 0
 4be:	19 f0       	breq	.+6      	; 0x4c6 <ProcessMessage+0x88>
 4c0:	64 2f       	mov	r22, r20
 4c2:	cd 01       	movw	r24, r26
 4c4:	09 94       	ijmp
 4c6:	08 95       	ret

000004c8 <HandleMessage>:
 4c8:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <msgType.1871>
 4cc:	91 11       	cpse	r25, r1
 4ce:	05 c0       	rjmp	.+10     	; 0x4da <HandleMessage+0x12>
 4d0:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <msgType.1871>
 4d4:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <msgLen.1872>
 4d8:	08 95       	ret
 4da:	40 91 9d 00 	lds	r20, 0x009D	; 0x80009d <msgLen.1872>
 4de:	41 11       	cpse	r20, r1
 4e0:	04 c0       	rjmp	.+8      	; 0x4ea <HandleMessage+0x22>
 4e2:	82 50       	subi	r24, 0x02	; 2
 4e4:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <msgLen.1872>
 4e8:	15 c0       	rjmp	.+42     	; 0x514 <HandleMessage+0x4c>
 4ea:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <bufferIndex.1870>
 4ee:	e4 17       	cp	r30, r20
 4f0:	98 f4       	brcc	.+38     	; 0x518 <HandleMessage+0x50>
 4f2:	21 e0       	ldi	r18, 0x01	; 1
 4f4:	2e 0f       	add	r18, r30
 4f6:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <bufferIndex.1870>
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	e2 57       	subi	r30, 0x72	; 114
 4fe:	ff 4f       	sbci	r31, 0xFF	; 255
 500:	80 83       	st	Z, r24
 502:	42 13       	cpse	r20, r18
 504:	09 c0       	rjmp	.+18     	; 0x518 <HandleMessage+0x50>
 506:	6e e8       	ldi	r22, 0x8E	; 142
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	89 2f       	mov	r24, r25
 50c:	0e 94 1f 02 	call	0x43e	; 0x43e <ProcessMessage>
 510:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <msgType.1871>
 514:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <bufferIndex.1870>
 518:	08 95       	ret

0000051a <SetInputOutput>:
 51a:	cf 93       	push	r28
 51c:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <outputRefreshCounter.1884>
 520:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <outputRefreshCounter.1884+0x1>
 524:	01 96       	adiw	r24, 0x01	; 1
 526:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <outputRefreshCounter.1884+0x1>
 52a:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <outputRefreshCounter.1884>
 52e:	83 70       	andi	r24, 0x03	; 3
 530:	99 27       	eor	r25, r25
 532:	89 2b       	or	r24, r25
 534:	21 f5       	brne	.+72     	; 0x57e <SetInputOutput+0x64>
 536:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <doorRefreshCounter.1885>
 53a:	8f 5f       	subi	r24, 0xFF	; 255
 53c:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <doorRefreshCounter.1885>
 540:	83 70       	andi	r24, 0x03	; 3
 542:	a8 2f       	mov	r26, r24
 544:	b0 e0       	ldi	r27, 0x00	; 0
 546:	aa 0f       	add	r26, r26
 548:	bb 1f       	adc	r27, r27
 54a:	aa 59       	subi	r26, 0x9A	; 154
 54c:	be 4f       	sbci	r27, 0xFE	; 254
 54e:	11 96       	adiw	r26, 0x01	; 1
 550:	ec 91       	ld	r30, X
 552:	11 97       	sbiw	r26, 0x01	; 1
 554:	9c 91       	ld	r25, X
 556:	94 ff       	sbrs	r25, 4
 558:	03 c0       	rjmp	.+6      	; 0x560 <SetInputOutput+0x46>
 55a:	94 e0       	ldi	r25, 0x04	; 4
 55c:	9e 1b       	sub	r25, r30
 55e:	e9 2f       	mov	r30, r25
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	ed 58       	subi	r30, 0x8D	; 141
 564:	ff 4f       	sbci	r31, 0xFF	; 255
 566:	21 e0       	ldi	r18, 0x01	; 1
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	a9 01       	movw	r20, r18
 56c:	02 c0       	rjmp	.+4      	; 0x572 <SetInputOutput+0x58>
 56e:	44 0f       	add	r20, r20
 570:	55 1f       	adc	r21, r21
 572:	8a 95       	dec	r24
 574:	e2 f7       	brpl	.-8      	; 0x56e <SetInputOutput+0x54>
 576:	ca 01       	movw	r24, r20
 578:	90 81       	ld	r25, Z
 57a:	89 2b       	or	r24, r25
 57c:	85 bb       	out	0x15, r24	; 21
 57e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <buttonRefreshCounter.1886>
 582:	8f 5f       	subi	r24, 0xFF	; 255
 584:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <buttonRefreshCounter.1886>
 588:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <displayCache>
 58c:	22 23       	and	r18, r18
 58e:	01 f1       	breq	.+64     	; 0x5d0 <SetInputOutput+0xb6>
 590:	83 70       	andi	r24, 0x03	; 3
 592:	62 2f       	mov	r22, r18
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	40 e1       	ldi	r20, 0x10	; 16
 598:	50 e0       	ldi	r21, 0x00	; 0
 59a:	08 2e       	mov	r0, r24
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <SetInputOutput+0x88>
 59e:	44 0f       	add	r20, r20
 5a0:	55 1f       	adc	r21, r21
 5a2:	0a 94       	dec	r0
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <SetInputOutput+0x84>
 5a6:	46 23       	and	r20, r22
 5a8:	57 23       	and	r21, r23
 5aa:	45 2b       	or	r20, r21
 5ac:	11 f0       	breq	.+4      	; 0x5b2 <SetInputOutput+0x98>
 5ae:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <buttonLiftLed>
 5b2:	08 2e       	mov	r0, r24
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <SetInputOutput+0xa0>
 5b6:	75 95       	asr	r23
 5b8:	67 95       	ror	r22
 5ba:	0a 94       	dec	r0
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <SetInputOutput+0x9c>
 5be:	60 fd       	sbrc	r22, 0
 5c0:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <buttonFloorLed>
 5c4:	82 2f       	mov	r24, r18
 5c6:	80 7f       	andi	r24, 0xF0	; 240
 5c8:	19 f0       	breq	.+6      	; 0x5d0 <SetInputOutput+0xb6>
 5ca:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <buttonLiftLed_on>
 5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <SetInputOutput+0xb8>
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	2f 70       	andi	r18, 0x0F	; 15
 5d4:	19 f0       	breq	.+6      	; 0x5dc <SetInputOutput+0xc2>
 5d6:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <buttonFloorLed_On>
 5da:	01 c0       	rjmp	.+2      	; 0x5de <SetInputOutput+0xc4>
 5dc:	21 e0       	ldi	r18, 0x01	; 1
 5de:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <liftPosDisplay_On>
 5e2:	81 11       	cpse	r24, r1
 5e4:	04 c0       	rjmp	.+8      	; 0x5ee <SetInputOutput+0xd4>
 5e6:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <Elevator>
 5ea:	3f 73       	andi	r19, 0x3F	; 63
 5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <SetInputOutput+0xd6>
 5ee:	3f e3       	ldi	r19, 0x3F	; 63
 5f0:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <liftDisplay7Seg_On>
 5f4:	81 11       	cpse	r24, r1
 5f6:	03 c0       	rjmp	.+6      	; 0x5fe <SetInputOutput+0xe4>
 5f8:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <liftDisplay7Seg>
 5fc:	01 c0       	rjmp	.+2      	; 0x600 <SetInputOutput+0xe6>
 5fe:	87 e0       	ldi	r24, 0x07	; 7
 600:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <floorDisplayPort>
 604:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <doorframe>
 608:	60 e4       	ldi	r22, 0x40	; 64
 60a:	86 9f       	mul	r24, r22
 60c:	a0 01       	movw	r20, r0
 60e:	11 24       	eor	r1, r1
 610:	60 e8       	ldi	r22, 0x80	; 128
 612:	96 9f       	mul	r25, r22
 614:	c0 01       	movw	r24, r0
 616:	11 24       	eor	r1, r1
 618:	84 2b       	or	r24, r20
 61a:	83 2b       	or	r24, r19
 61c:	88 bb       	out	0x18, r24	; 24
 61e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <buttonLiftLed>
 622:	98 e0       	ldi	r25, 0x08	; 8
 624:	89 9f       	mul	r24, r25
 626:	a0 01       	movw	r20, r0
 628:	11 24       	eor	r1, r1
 62a:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <buttonFloorLed>
 62e:	30 e2       	ldi	r19, 0x20	; 32
 630:	93 9f       	mul	r25, r19
 632:	c0 01       	movw	r24, r0
 634:	11 24       	eor	r1, r1
 636:	84 2b       	or	r24, r20
 638:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <floorDisplayPort>
 63c:	38 2b       	or	r19, r24
 63e:	40 e8       	ldi	r20, 0x80	; 128
 640:	24 9f       	mul	r18, r20
 642:	c0 01       	movw	r24, r0
 644:	11 24       	eor	r1, r1
 646:	83 2b       	or	r24, r19
 648:	8b bb       	out	0x1b, r24	; 27
 64a:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <USART_rxBufferOut>
 64e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <USART_rxBufferIn>
 652:	98 17       	cp	r25, r24
 654:	b9 f0       	breq	.+46     	; 0x684 <SetInputOutput+0x16a>
 656:	0e 94 df 00 	call	0x1be	; 0x1be <EnterAtomic>
 65a:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <USART_rxBufferOut>
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	8e 0f       	add	r24, r30
 662:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <USART_rxBufferOut>
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	ea 5b       	subi	r30, 0xBA	; 186
 66a:	fe 4f       	sbci	r31, 0xFE	; 254
 66c:	c0 81       	ld	r28, Z
 66e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <USART_rxBufferOut>
 672:	8f 71       	andi	r24, 0x1F	; 31
 674:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <USART_rxBufferOut>
 678:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LeaveAtomic>
 67c:	8c 2f       	mov	r24, r28
 67e:	0e 94 64 02 	call	0x4c8	; 0x4c8 <HandleMessage>
 682:	e3 cf       	rjmp	.-58     	; 0x64a <SetInputOutput+0x130>
 684:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <terminalRefreshCounter.1887>
 688:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <terminalRefreshCounter.1887+0x1>
 68c:	9c 01       	movw	r18, r24
 68e:	2f 5f       	subi	r18, 0xFF	; 255
 690:	3f 4f       	sbci	r19, 0xFF	; 255
 692:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <terminalRefreshCounter.1887+0x1>
 696:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <terminalRefreshCounter.1887>
 69a:	8f 3f       	cpi	r24, 0xFF	; 255
 69c:	9f 40       	sbci	r25, 0x0F	; 15
 69e:	c9 f4       	brne	.+50     	; 0x6d2 <SetInputOutput+0x1b8>
 6a0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <EnableStatusUpdate>
 6a4:	88 23       	and	r24, r24
 6a6:	a9 f0       	breq	.+42     	; 0x6d2 <SetInputOutput+0x1b8>
 6a8:	84 e0       	ldi	r24, 0x04	; 4
 6aa:	0e 94 9b 01 	call	0x336	; 0x336 <Usart_PutChar>
 6ae:	86 e0       	ldi	r24, 0x06	; 6
 6b0:	0e 94 9b 01 	call	0x336	; 0x336 <Usart_PutChar>
 6b4:	85 ea       	ldi	r24, 0xA5	; 165
 6b6:	0e 94 9b 01 	call	0x336	; 0x336 <Usart_PutChar>
 6ba:	8a e5       	ldi	r24, 0x5A	; 90
 6bc:	0e 94 9b 01 	call	0x336	; 0x336 <Usart_PutChar>
 6c0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <SystemState>
 6c4:	0e 94 9b 01 	call	0x336	; 0x336 <Usart_PutChar>
 6c8:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <OpenDoors>
 6cc:	cf 91       	pop	r28
 6ce:	0c 94 9b 01 	jmp	0x336	; 0x336 <Usart_PutChar>
 6d2:	cf 91       	pop	r28
 6d4:	08 95       	ret

000006d6 <InitializeStart>:
 6d6:	8a ec       	ldi	r24, 0xCA	; 202
 6d8:	0e 94 9b 01 	call	0x336	; 0x336 <Usart_PutChar>
 6dc:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <liftPosDisplay_On>
 6e0:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <buttonLiftLed_on>
 6e4:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <liftDisplay7Seg_On>
 6e8:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <buttonFloorLed_On>
 6ec:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <doorframe>
 6f0:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <liftDoorState+0x1>
 6f4:	80 e2       	ldi	r24, 0x20	; 32
 6f6:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <liftDoorState>
 6fa:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <liftDoorState+0x3>
 6fe:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <liftDoorState+0x2>
 702:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <liftDoorState+0x5>
 706:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <liftDoorState+0x4>
 70a:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <liftDoorState+0x7>
 70e:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <liftDoorState+0x6>
 712:	8f e1       	ldi	r24, 0x1F	; 31
 714:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Elevator>
 718:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Elevator+0x1>
 71c:	0e 94 4f 01 	call	0x29e	; 0x29e <InitializeCounter>
 720:	20 e0       	ldi	r18, 0x00	; 0
 722:	40 e0       	ldi	r20, 0x00	; 0
 724:	61 ec       	ldi	r22, 0xC1	; 193
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	0e 94 9f 01 	call	0x33e	; 0x33e <SendEvent>
 72c:	8e ef       	ldi	r24, 0xFE	; 254
 72e:	0e 94 9b 01 	call	0x336	; 0x336 <Usart_PutChar>
 732:	0e 94 14 01 	call	0x228	; 0x228 <DispatchEvent>
 736:	0e 94 8d 02 	call	0x51a	; 0x51a <SetInputOutput>
 73a:	fb cf       	rjmp	.-10     	; 0x732 <InitializeStart+0x5c>

0000073c <__vector_1>:
 73c:	1f 92       	push	r1
 73e:	0f 92       	push	r0
 740:	0f b6       	in	r0, 0x3f	; 63
 742:	0f 92       	push	r0
 744:	11 24       	eor	r1, r1
 746:	2f 93       	push	r18
 748:	3f 93       	push	r19
 74a:	4f 93       	push	r20
 74c:	5f 93       	push	r21
 74e:	6f 93       	push	r22
 750:	7f 93       	push	r23
 752:	8f 93       	push	r24
 754:	9f 93       	push	r25
 756:	af 93       	push	r26
 758:	bf 93       	push	r27
 75a:	ef 93       	push	r30
 75c:	ff 93       	push	r31
 75e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <ButtonState>
 762:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <ButtonState+0x1>
 766:	91 60       	ori	r25, 0x01	; 1
 768:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <ButtonState+0x1>
 76c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <ButtonState>
 770:	40 91 25 01 	lds	r20, 0x0125	; 0x800125 <ButtonState>
 774:	50 91 26 01 	lds	r21, 0x0126	; 0x800126 <ButtonState+0x1>
 778:	20 e0       	ldi	r18, 0x00	; 0
 77a:	69 ec       	ldi	r22, 0xC9	; 201
 77c:	80 e1       	ldi	r24, 0x10	; 16
 77e:	0e 94 9f 01 	call	0x33e	; 0x33e <SendEvent>
 782:	ff 91       	pop	r31
 784:	ef 91       	pop	r30
 786:	bf 91       	pop	r27
 788:	af 91       	pop	r26
 78a:	9f 91       	pop	r25
 78c:	8f 91       	pop	r24
 78e:	7f 91       	pop	r23
 790:	6f 91       	pop	r22
 792:	5f 91       	pop	r21
 794:	4f 91       	pop	r20
 796:	3f 91       	pop	r19
 798:	2f 91       	pop	r18
 79a:	0f 90       	pop	r0
 79c:	0f be       	out	0x3f, r0	; 63
 79e:	0f 90       	pop	r0
 7a0:	1f 90       	pop	r1
 7a2:	18 95       	reti

000007a4 <__vector_13>:
 7a4:	1f 92       	push	r1
 7a6:	0f 92       	push	r0
 7a8:	0f b6       	in	r0, 0x3f	; 63
 7aa:	0f 92       	push	r0
 7ac:	11 24       	eor	r1, r1
 7ae:	2f 93       	push	r18
 7b0:	3f 93       	push	r19
 7b2:	8f 93       	push	r24
 7b4:	9f 93       	push	r25
 7b6:	ef 93       	push	r30
 7b8:	ff 93       	push	r31
 7ba:	5f 9b       	sbis	0x0b, 7	; 11
 7bc:	1e c0       	rjmp	.+60     	; 0x7fa <__vector_13+0x56>
 7be:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <USART_rxBufferIn>
 7c2:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <USART_rxBufferOut>
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	01 96       	adiw	r24, 0x01	; 1
 7ca:	8f 71       	andi	r24, 0x1F	; 31
 7cc:	99 27       	eor	r25, r25
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	82 17       	cp	r24, r18
 7d2:	93 07       	cpc	r25, r19
 7d4:	89 f0       	breq	.+34     	; 0x7f8 <__vector_13+0x54>
 7d6:	8c b1       	in	r24, 0x0c	; 12
 7d8:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <USART_rxBufferIn>
 7dc:	91 e0       	ldi	r25, 0x01	; 1
 7de:	9e 0f       	add	r25, r30
 7e0:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <USART_rxBufferIn>
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	ea 5b       	subi	r30, 0xBA	; 186
 7e8:	fe 4f       	sbci	r31, 0xFE	; 254
 7ea:	80 83       	st	Z, r24
 7ec:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <USART_rxBufferIn>
 7f0:	8f 71       	andi	r24, 0x1F	; 31
 7f2:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <USART_rxBufferIn>
 7f6:	e1 cf       	rjmp	.-62     	; 0x7ba <__vector_13+0x16>
 7f8:	57 98       	cbi	0x0a, 7	; 10
 7fa:	ff 91       	pop	r31
 7fc:	ef 91       	pop	r30
 7fe:	9f 91       	pop	r25
 800:	8f 91       	pop	r24
 802:	3f 91       	pop	r19
 804:	2f 91       	pop	r18
 806:	0f 90       	pop	r0
 808:	0f be       	out	0x3f, r0	; 63
 80a:	0f 90       	pop	r0
 80c:	1f 90       	pop	r1
 80e:	18 95       	reti

00000810 <__vector_7>:
 810:	1f 92       	push	r1
 812:	0f 92       	push	r0
 814:	0f b6       	in	r0, 0x3f	; 63
 816:	0f 92       	push	r0
 818:	11 24       	eor	r1, r1
 81a:	2f 93       	push	r18
 81c:	3f 93       	push	r19
 81e:	4f 93       	push	r20
 820:	5f 93       	push	r21
 822:	6f 93       	push	r22
 824:	7f 93       	push	r23
 826:	8f 93       	push	r24
 828:	9f 93       	push	r25
 82a:	af 93       	push	r26
 82c:	bf 93       	push	r27
 82e:	ef 93       	push	r30
 830:	ff 93       	push	r31
 832:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <ElevatorTick.1962>
 836:	8f 5f       	subi	r24, 0xFF	; 255
 838:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <ElevatorTick.1962>
 83c:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <__data_end>
 840:	9f 5f       	subi	r25, 0xFF	; 255
 842:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <__data_end>
 846:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <Elevator+0x2>
 84a:	0e 94 ba 04 	call	0x974	; 0x974 <__udivmodqi4>
 84e:	91 11       	cpse	r25, r1
 850:	14 c0       	rjmp	.+40     	; 0x87a <__stack+0x1b>
 852:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <Elevator>
 856:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <Elevator+0x1>
 85a:	96 17       	cp	r25, r22
 85c:	61 f0       	breq	.+24     	; 0x876 <__stack+0x17>
 85e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <Elevator+0x4>
 862:	89 0f       	add	r24, r25
 864:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Elevator>
 868:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <Elevator+0x5>
 86c:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <Elevator+0x6>
 870:	30 97       	sbiw	r30, 0x00	; 0
 872:	09 f0       	breq	.+2      	; 0x876 <__stack+0x17>
 874:	09 95       	icall
 876:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <ElevatorTick.1962>
 87a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 87e:	6c e0       	ldi	r22, 0x0C	; 12
 880:	0e 94 ba 04 	call	0x974	; 0x974 <__udivmodqi4>
 884:	91 11       	cpse	r25, r1
 886:	04 c0       	rjmp	.+8      	; 0x890 <__stack+0x31>
 888:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__data_end>
 88c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <MakeDoorStates>
 890:	ff 91       	pop	r31
 892:	ef 91       	pop	r30
 894:	bf 91       	pop	r27
 896:	af 91       	pop	r26
 898:	9f 91       	pop	r25
 89a:	8f 91       	pop	r24
 89c:	7f 91       	pop	r23
 89e:	6f 91       	pop	r22
 8a0:	5f 91       	pop	r21
 8a2:	4f 91       	pop	r20
 8a4:	3f 91       	pop	r19
 8a6:	2f 91       	pop	r18
 8a8:	0f 90       	pop	r0
 8aa:	0f be       	out	0x3f, r0	; 63
 8ac:	0f 90       	pop	r0
 8ae:	1f 90       	pop	r1
 8b0:	18 95       	reti

000008b2 <__vector_10>:
 8b2:	1f 92       	push	r1
 8b4:	0f 92       	push	r0
 8b6:	0f b6       	in	r0, 0x3f	; 63
 8b8:	0f 92       	push	r0
 8ba:	11 24       	eor	r1, r1
 8bc:	cf 92       	push	r12
 8be:	df 92       	push	r13
 8c0:	ff 92       	push	r15
 8c2:	0f 93       	push	r16
 8c4:	1f 93       	push	r17
 8c6:	2f 93       	push	r18
 8c8:	3f 93       	push	r19
 8ca:	4f 93       	push	r20
 8cc:	5f 93       	push	r21
 8ce:	6f 93       	push	r22
 8d0:	7f 93       	push	r23
 8d2:	8f 93       	push	r24
 8d4:	9f 93       	push	r25
 8d6:	af 93       	push	r26
 8d8:	bf 93       	push	r27
 8da:	cf 93       	push	r28
 8dc:	df 93       	push	r29
 8de:	ef 93       	push	r30
 8e0:	ff 93       	push	r31
 8e2:	03 e3       	ldi	r16, 0x33	; 51
 8e4:	11 e0       	ldi	r17, 0x01	; 1
 8e6:	c0 e0       	ldi	r28, 0x00	; 0
 8e8:	d0 e0       	ldi	r29, 0x00	; 0
 8ea:	cc 24       	eor	r12, r12
 8ec:	c3 94       	inc	r12
 8ee:	d1 2c       	mov	r13, r1
 8f0:	f0 90 43 01 	lds	r15, 0x0143	; 0x800143 <UsedTimers>
 8f4:	8f 2d       	mov	r24, r15
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	0c 2e       	mov	r0, r28
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <__vector_10+0x4e>
 8fc:	95 95       	asr	r25
 8fe:	87 95       	ror	r24
 900:	0a 94       	dec	r0
 902:	e2 f7       	brpl	.-8      	; 0x8fc <__vector_10+0x4a>
 904:	80 ff       	sbrs	r24, 0
 906:	18 c0       	rjmp	.+48     	; 0x938 <__vector_10+0x86>
 908:	f8 01       	movw	r30, r16
 90a:	80 81       	ld	r24, Z
 90c:	91 81       	ldd	r25, Z+1	; 0x01
 90e:	01 97       	sbiw	r24, 0x01	; 1
 910:	91 83       	std	Z+1, r25	; 0x01
 912:	80 83       	st	Z, r24
 914:	89 2b       	or	r24, r25
 916:	81 f4       	brne	.+32     	; 0x938 <__vector_10+0x86>
 918:	20 e0       	ldi	r18, 0x00	; 0
 91a:	40 e0       	ldi	r20, 0x00	; 0
 91c:	68 ec       	ldi	r22, 0xC8	; 200
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	0e 94 9f 01 	call	0x33e	; 0x33e <SendEvent>
 924:	c6 01       	movw	r24, r12
 926:	0c 2e       	mov	r0, r28
 928:	01 c0       	rjmp	.+2      	; 0x92c <__vector_10+0x7a>
 92a:	88 0f       	add	r24, r24
 92c:	0a 94       	dec	r0
 92e:	ea f7       	brpl	.-6      	; 0x92a <__vector_10+0x78>
 930:	80 95       	com	r24
 932:	f8 22       	and	r15, r24
 934:	f0 92 43 01 	sts	0x0143, r15	; 0x800143 <UsedTimers>
 938:	21 96       	adiw	r28, 0x01	; 1
 93a:	0e 5f       	subi	r16, 0xFE	; 254
 93c:	1f 4f       	sbci	r17, 0xFF	; 255
 93e:	c8 30       	cpi	r28, 0x08	; 8
 940:	d1 05       	cpc	r29, r1
 942:	b1 f6       	brne	.-84     	; 0x8f0 <__vector_10+0x3e>
 944:	ff 91       	pop	r31
 946:	ef 91       	pop	r30
 948:	df 91       	pop	r29
 94a:	cf 91       	pop	r28
 94c:	bf 91       	pop	r27
 94e:	af 91       	pop	r26
 950:	9f 91       	pop	r25
 952:	8f 91       	pop	r24
 954:	7f 91       	pop	r23
 956:	6f 91       	pop	r22
 958:	5f 91       	pop	r21
 95a:	4f 91       	pop	r20
 95c:	3f 91       	pop	r19
 95e:	2f 91       	pop	r18
 960:	1f 91       	pop	r17
 962:	0f 91       	pop	r16
 964:	ff 90       	pop	r15
 966:	df 90       	pop	r13
 968:	cf 90       	pop	r12
 96a:	0f 90       	pop	r0
 96c:	0f be       	out	0x3f, r0	; 63
 96e:	0f 90       	pop	r0
 970:	1f 90       	pop	r1
 972:	18 95       	reti

00000974 <__udivmodqi4>:
 974:	99 1b       	sub	r25, r25
 976:	79 e0       	ldi	r23, 0x09	; 9
 978:	04 c0       	rjmp	.+8      	; 0x982 <__udivmodqi4_ep>

0000097a <__udivmodqi4_loop>:
 97a:	99 1f       	adc	r25, r25
 97c:	96 17       	cp	r25, r22
 97e:	08 f0       	brcs	.+2      	; 0x982 <__udivmodqi4_ep>
 980:	96 1b       	sub	r25, r22

00000982 <__udivmodqi4_ep>:
 982:	88 1f       	adc	r24, r24
 984:	7a 95       	dec	r23
 986:	c9 f7       	brne	.-14     	; 0x97a <__udivmodqi4_loop>
 988:	80 95       	com	r24
 98a:	08 95       	ret

0000098c <_exit>:
 98c:	f8 94       	cli

0000098e <__stop_program>:
 98e:	ff cf       	rjmp	.-2      	; 0x98e <__stop_program>
