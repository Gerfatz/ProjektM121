
LiftSimulation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000874  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000874  00000908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e8  0080007e  0080007e  00000926  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000988  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000191f  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a4  00000000  00000000  00002433  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a7c  00000000  00000000  00002dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000438  00000000  00000000  00003854  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d7e  00000000  00000000  00003c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fcd  00000000  00000000  00004a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000059d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 10 03 	jmp	0x620	; 0x620 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 cb 03 	jmp	0x796	; 0x796 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 44 03 	jmp	0x688	; 0x688 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 38 04 	jmp	0x870	; 0x870 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main(void)
{
    /* Replace with your application code */
   InitializePorts();
  92:	0e 94 ff 00 	call	0x1fe	; 0x1fe <InitializePorts>
   Usart_Init();
  96:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Usart_Init>
   RegisterTestHandler(TestFunction);
  9a:	89 e6       	ldi	r24, 0x69	; 105
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <RegisterTestHandler>
   InitializeStart();
  a2:	0e 94 dd 02 	call	0x5ba	; 0x5ba <InitializeStart>
}
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	08 95       	ret

000000ac <FindBit>:
uint8_t FindBit(uint8_t value)
{
	uint8_t maxsize = sizeof(value) * 8;
	uint8_t i = 0;

	if (value == 0) {
  ac:	88 23       	and	r24, r24
  ae:	59 f0       	breq	.+22     	; 0xc6 <FindBit+0x1a>
		return 0;
	}

	while ((value & 0x1) != 0x1 && i < maxsize) {
  b0:	80 fd       	sbrc	r24, 0
  b2:	0b c0       	rjmp	.+22     	; 0xca <FindBit+0x1e>
  b4:	90 e0       	ldi	r25, 0x00	; 0
		i++;
  b6:	9f 5f       	subi	r25, 0xFF	; 255
		value = value >> 1;
  b8:	86 95       	lsr	r24

	if (value == 0) {
		return 0;
	}

	while ((value & 0x1) != 0x1 && i < maxsize) {
  ba:	80 fd       	sbrc	r24, 0
  bc:	08 c0       	rjmp	.+16     	; 0xce <FindBit+0x22>
  be:	98 30       	cpi	r25, 0x08	; 8
  c0:	d1 f7       	brne	.-12     	; 0xb6 <FindBit+0xa>
		i++;
  c2:	88 e0       	ldi	r24, 0x08	; 8
  c4:	08 95       	ret
{
	uint8_t maxsize = sizeof(value) * 8;
	uint8_t i = 0;

	if (value == 0) {
		return 0;
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	08 95       	ret
	}

	while ((value & 0x1) != 0x1 && i < maxsize) {
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	08 95       	ret
		i++;
  ce:	89 2f       	mov	r24, r25
		value = value >> 1;
	};

	return i;
}
  d0:	08 95       	ret

000000d2 <TestFunction>:
   RegisterTestHandler(TestFunction);
   InitializeStart();
}

void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	8c 01       	movw	r16, r24
	if(data[0] == 1)
  dc:	fc 01       	movw	r30, r24
  de:	80 81       	ld	r24, Z
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	79 f4       	brne	.+30     	; 0x102 <TestFunction+0x30>
  e4:	c2 e7       	ldi	r28, 0x72	; 114
  e6:	d0 e0       	ldi	r29, 0x00	; 0
  e8:	88 e4       	ldi	r24, 0x48	; 72
	{
		char *ch = "Hello-World\n";
		
		while( *ch != 0)
		{
			Usart_PutChar(*ch++);	
  ea:	0e 94 0d 01 	call	0x21a	; 0x21a <Usart_PutChar>
			SetDisplay(Floor2);		
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <SetDisplay>
{
	if(data[0] == 1)
	{
		char *ch = "Hello-World\n";
		
		while( *ch != 0)
  f4:	89 91       	ld	r24, Y+
  f6:	81 11       	cpse	r24, r1
  f8:	f8 cf       	rjmp	.-16     	; 0xea <TestFunction+0x18>
		{
			Usart_PutChar(*ch++);	
			SetDisplay(Floor2);		
		}
	}
	if(data[0] != 1)
  fa:	f8 01       	movw	r30, r16
  fc:	80 81       	ld	r24, Z
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	41 f0       	breq	.+16     	; 0x112 <TestFunction+0x40>
	{
		uint8_t res = FindBit(data[0]);
 102:	0e 94 56 00 	call	0xac	; 0xac <FindBit>
		Usart_PutChar((char)(res + 48));
 106:	80 5d       	subi	r24, 0xD0	; 208
 108:	0e 94 0d 01 	call	0x21a	; 0x21a <Usart_PutChar>
		Usart_PutChar('\n');
 10c:	8a e0       	ldi	r24, 0x0A	; 10
 10e:	0e 94 0d 01 	call	0x21a	; 0x21a <Usart_PutChar>
	}
}
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	1f 91       	pop	r17
 118:	0f 91       	pop	r16
 11a:	08 95       	ret

0000011c <EnterAtomic>:
 11c:	f8 94       	cli
 11e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <enterAtomicNesting>
 122:	8f 5f       	subi	r24, 0xFF	; 255
 124:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <enterAtomicNesting>
 128:	08 95       	ret

0000012a <LeaveAtomic>:
 12a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <enterAtomicNesting>
 12e:	81 50       	subi	r24, 0x01	; 1
 130:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <enterAtomicNesting>
 134:	81 11       	cpse	r24, r1
 136:	01 c0       	rjmp	.+2      	; 0x13a <LeaveAtomic+0x10>
 138:	78 94       	sei
 13a:	08 95       	ret

0000013c <DispatchEvent>:
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	0e 94 8e 00 	call	0x11c	; 0x11c <EnterAtomic>
 148:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <msgQ_out>
 14c:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <msgQ_in>
 150:	98 17       	cp	r25, r24
 152:	59 f0       	breq	.+22     	; 0x16a <DispatchEvent+0x2e>
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	98 9f       	mul	r25, r24
 158:	e0 01       	movw	r28, r0
 15a:	11 24       	eor	r1, r1
 15c:	c7 56       	subi	r28, 0x67	; 103
 15e:	df 4f       	sbci	r29, 0xFF	; 255
 160:	9f 5f       	subi	r25, 0xFF	; 255
 162:	9f 71       	andi	r25, 0x1F	; 31
 164:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <msgQ_out>
 168:	02 c0       	rjmp	.+4      	; 0x16e <DispatchEvent+0x32>
 16a:	c0 e0       	ldi	r28, 0x00	; 0
 16c:	d0 e0       	ldi	r29, 0x00	; 0
 16e:	0e 94 95 00 	call	0x12a	; 0x12a <LeaveAtomic>
 172:	20 97       	sbiw	r28, 0x00	; 0
 174:	c9 f0       	breq	.+50     	; 0x1a8 <DispatchEvent+0x6c>
 176:	00 91 60 00 	lds	r16, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 17a:	10 91 61 00 	lds	r17, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	00 36       	cpi	r16, 0x60	; 96
 182:	1f 07       	cpc	r17, r31
 184:	89 f0       	breq	.+34     	; 0x1a8 <DispatchEvent+0x6c>
 186:	d8 01       	movw	r26, r16
 188:	12 96       	adiw	r26, 0x02	; 2
 18a:	9c 91       	ld	r25, X
 18c:	12 97       	sbiw	r26, 0x02	; 2
 18e:	88 81       	ld	r24, Y
 190:	89 23       	and	r24, r25
 192:	31 f0       	breq	.+12     	; 0x1a0 <DispatchEvent+0x64>
 194:	13 96       	adiw	r26, 0x03	; 3
 196:	ed 91       	ld	r30, X+
 198:	fc 91       	ld	r31, X
 19a:	14 97       	sbiw	r26, 0x04	; 4
 19c:	ce 01       	movw	r24, r28
 19e:	09 95       	icall
 1a0:	f8 01       	movw	r30, r16
 1a2:	00 81       	ld	r16, Z
 1a4:	11 81       	ldd	r17, Z+1	; 0x01
 1a6:	eb cf       	rjmp	.-42     	; 0x17e <DispatchEvent+0x42>
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <InitializeCounter>:
 1b2:	12 be       	out	0x32, r1	; 50
 1b4:	8b e0       	ldi	r24, 0x0B	; 11
 1b6:	83 bf       	out	0x33, r24	; 51
 1b8:	8d e7       	ldi	r24, 0x7D	; 125
 1ba:	8c bf       	out	0x3c, r24	; 60
 1bc:	89 b7       	in	r24, 0x39	; 57
 1be:	82 60       	ori	r24, 0x02	; 2
 1c0:	89 bf       	out	0x39, r24	; 57
 1c2:	80 e8       	ldi	r24, 0x80	; 128
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	9b bd       	out	0x2b, r25	; 43
 1c8:	8a bd       	out	0x2a, r24	; 42
 1ca:	1d bc       	out	0x2d, r1	; 45
 1cc:	1c bc       	out	0x2c, r1	; 44
 1ce:	1f bc       	out	0x2f, r1	; 47
 1d0:	8d e0       	ldi	r24, 0x0D	; 13
 1d2:	8e bd       	out	0x2e, r24	; 46
 1d4:	89 b7       	in	r24, 0x39	; 57
 1d6:	80 61       	ori	r24, 0x10	; 16
 1d8:	89 bf       	out	0x39, r24	; 57
 1da:	08 95       	ret

000001dc <SetDisplay>:
 1dc:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <liftDisplay7Seg>
 1e0:	08 95       	ret

000001e2 <RegisterTestHandler>:
 1e2:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <_testHandler+0x1>
 1e6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <_testHandler>
 1ea:	08 95       	ret

000001ec <Usart_Init>:
 1ec:	10 bc       	out	0x20, r1	; 32
 1ee:	8c e0       	ldi	r24, 0x0C	; 12
 1f0:	89 b9       	out	0x09, r24	; 9
 1f2:	86 e8       	ldi	r24, 0x86	; 134
 1f4:	80 bd       	out	0x20, r24	; 32
 1f6:	88 e9       	ldi	r24, 0x98	; 152
 1f8:	8a b9       	out	0x0a, r24	; 10
 1fa:	78 94       	sei
 1fc:	08 95       	ret

000001fe <InitializePorts>:
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	87 bb       	out	0x17, r24	; 23
 202:	84 bb       	out	0x14, r24	; 20
 204:	8a bb       	out	0x1a, r24	; 26
 206:	11 ba       	out	0x11, r1	; 17
 208:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Usart_Init>
 20c:	85 b7       	in	r24, 0x35	; 53
 20e:	83 60       	ori	r24, 0x03	; 3
 210:	85 bf       	out	0x35, r24	; 53
 212:	8b b7       	in	r24, 0x3b	; 59
 214:	80 64       	ori	r24, 0x40	; 64
 216:	8b bf       	out	0x3b, r24	; 59
 218:	08 95       	ret

0000021a <Usart_PutChar>:
 21a:	8c b9       	out	0x0c, r24	; 12
 21c:	5d 9b       	sbis	0x0b, 5	; 11
 21e:	fe cf       	rjmp	.-4      	; 0x21c <Usart_PutChar+0x2>
 220:	08 95       	ret

00000222 <SendEvent>:
 222:	0f 93       	push	r16
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	c8 2f       	mov	r28, r24
 22c:	06 2f       	mov	r16, r22
 22e:	d4 2f       	mov	r29, r20
 230:	12 2f       	mov	r17, r18
 232:	0e 94 8e 00 	call	0x11c	; 0x11c <EnterAtomic>
 236:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <msgQ_in>
 23a:	e8 2f       	mov	r30, r24
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	af 01       	movw	r20, r30
 240:	4f 5f       	subi	r20, 0xFF	; 255
 242:	5f 4f       	sbci	r21, 0xFF	; 255
 244:	4f 71       	andi	r20, 0x1F	; 31
 246:	55 27       	eor	r21, r21
 248:	20 91 97 00 	lds	r18, 0x0097	; 0x800097 <msgQ_out>
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	42 17       	cp	r20, r18
 250:	53 07       	cpc	r21, r19
 252:	71 f4       	brne	.+28     	; 0x270 <SendEvent+0x4e>
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	0e 94 0d 01 	call	0x21a	; 0x21a <Usart_PutChar>
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 0d 01 	call	0x21a	; 0x21a <Usart_PutChar>
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	0e 94 0d 01 	call	0x21a	; 0x21a <Usart_PutChar>
 266:	8e ed       	ldi	r24, 0xDE	; 222
 268:	0e 94 0d 01 	call	0x21a	; 0x21a <Usart_PutChar>
 26c:	8d ea       	ldi	r24, 0xAD	; 173
 26e:	f9 cf       	rjmp	.-14     	; 0x262 <SendEvent+0x40>
 270:	ee 0f       	add	r30, r30
 272:	ff 1f       	adc	r31, r31
 274:	ee 0f       	add	r30, r30
 276:	ff 1f       	adc	r31, r31
 278:	e7 56       	subi	r30, 0x67	; 103
 27a:	ff 4f       	sbci	r31, 0xFF	; 255
 27c:	01 83       	std	Z+1, r16	; 0x01
 27e:	13 83       	std	Z+3, r17	; 0x03
 280:	d2 83       	std	Z+2, r29	; 0x02
 282:	c0 83       	st	Z, r28
 284:	8f 5f       	subi	r24, 0xFF	; 255
 286:	8f 71       	andi	r24, 0x1F	; 31
 288:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <msgQ_in>
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	0c 94 95 00 	jmp	0x12a	; 0x12a <LeaveAtomic>

00000298 <MakeDoorStates>:
 298:	df 92       	push	r13
 29a:	ef 92       	push	r14
 29c:	ff 92       	push	r15
 29e:	0f 93       	push	r16
 2a0:	1f 93       	push	r17
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	ce e5       	ldi	r28, 0x5E	; 94
 2a8:	d1 e0       	ldi	r29, 0x01	; 1
 2aa:	00 e0       	ldi	r16, 0x00	; 0
 2ac:	10 e0       	ldi	r17, 0x00	; 0
 2ae:	ee 24       	eor	r14, r14
 2b0:	e3 94       	inc	r14
 2b2:	f1 2c       	mov	r15, r1
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	81 11       	cpse	r24, r1
 2b8:	24 c0       	rjmp	.+72     	; 0x302 <MakeDoorStates+0x6a>
 2ba:	48 81       	ld	r20, Y
 2bc:	40 ff       	sbrs	r20, 0
 2be:	23 c0       	rjmp	.+70     	; 0x306 <MakeDoorStates+0x6e>
 2c0:	4e 7f       	andi	r20, 0xFE	; 254
 2c2:	48 83       	st	Y, r20
 2c4:	20 2f       	mov	r18, r16
 2c6:	65 ec       	ldi	r22, 0xC5	; 197
 2c8:	80 e1       	ldi	r24, 0x10	; 16
 2ca:	0e 94 11 01 	call	0x222	; 0x222 <SendEvent>
 2ce:	88 81       	ld	r24, Y
 2d0:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <OpenDoors>
 2d4:	84 ff       	sbrs	r24, 4
 2d6:	0a c0       	rjmp	.+20     	; 0x2ec <MakeDoorStates+0x54>
 2d8:	97 01       	movw	r18, r14
 2da:	00 2e       	mov	r0, r16
 2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <MakeDoorStates+0x48>
 2de:	22 0f       	add	r18, r18
 2e0:	0a 94       	dec	r0
 2e2:	ea f7       	brpl	.-6      	; 0x2de <MakeDoorStates+0x46>
 2e4:	24 2b       	or	r18, r20
 2e6:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <OpenDoors>
 2ea:	0d c0       	rjmp	.+26     	; 0x306 <MakeDoorStates+0x6e>
 2ec:	c7 01       	movw	r24, r14
 2ee:	00 2e       	mov	r0, r16
 2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <MakeDoorStates+0x5c>
 2f2:	88 0f       	add	r24, r24
 2f4:	0a 94       	dec	r0
 2f6:	ea f7       	brpl	.-6      	; 0x2f2 <MakeDoorStates+0x5a>
 2f8:	80 95       	com	r24
 2fa:	84 23       	and	r24, r20
 2fc:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <OpenDoors>
 300:	02 c0       	rjmp	.+4      	; 0x306 <MakeDoorStates+0x6e>
 302:	81 50       	subi	r24, 0x01	; 1
 304:	89 83       	std	Y+1, r24	; 0x01
 306:	0f 5f       	subi	r16, 0xFF	; 255
 308:	1f 4f       	sbci	r17, 0xFF	; 255
 30a:	22 96       	adiw	r28, 0x02	; 2
 30c:	04 30       	cpi	r16, 0x04	; 4
 30e:	11 05       	cpc	r17, r1
 310:	89 f6       	brne	.-94     	; 0x2b4 <MakeDoorStates+0x1c>
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	1f 91       	pop	r17
 318:	0f 91       	pop	r16
 31a:	ff 90       	pop	r15
 31c:	ef 90       	pop	r14
 31e:	df 90       	pop	r13
 320:	08 95       	ret

00000322 <ProcessMessage>:
 322:	db 01       	movw	r26, r22
 324:	82 30       	cpi	r24, 0x02	; 2
 326:	b1 f5       	brne	.+108    	; 0x394 <ProcessMessage+0x72>
 328:	8c 91       	ld	r24, X
 32a:	98 2f       	mov	r25, r24
 32c:	90 72       	andi	r25, 0x20	; 32
 32e:	28 2f       	mov	r18, r24
 330:	20 76       	andi	r18, 0x60	; 96
 332:	d9 f1       	breq	.+118    	; 0x3aa <ProcessMessage+0x88>
 334:	21 e0       	ldi	r18, 0x01	; 1
 336:	38 2f       	mov	r19, r24
 338:	30 71       	andi	r19, 0x10	; 16
 33a:	84 ff       	sbrs	r24, 4
 33c:	20 e0       	ldi	r18, 0x00	; 0
 33e:	99 23       	and	r25, r25
 340:	11 f0       	breq	.+4      	; 0x346 <ProcessMessage+0x24>
 342:	94 e0       	ldi	r25, 0x04	; 4
 344:	01 c0       	rjmp	.+2      	; 0x348 <ProcessMessage+0x26>
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	8f 70       	andi	r24, 0x0F	; 15
 34a:	89 0f       	add	r24, r25
 34c:	41 e0       	ldi	r20, 0x01	; 1
 34e:	50 e0       	ldi	r21, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <ProcessMessage+0x34>
 352:	44 0f       	add	r20, r20
 354:	55 1f       	adc	r21, r21
 356:	8a 95       	dec	r24
 358:	e2 f7       	brpl	.-8      	; 0x352 <ProcessMessage+0x30>
 35a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ButtonState>
 35e:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <ButtonState+0x1>
 362:	ba 01       	movw	r22, r20
 364:	60 95       	com	r22
 366:	70 95       	com	r23
 368:	86 23       	and	r24, r22
 36a:	97 23       	and	r25, r23
 36c:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <ButtonState+0x1>
 370:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <ButtonState>
 374:	33 23       	and	r19, r19
 376:	51 f0       	breq	.+20     	; 0x38c <ProcessMessage+0x6a>
 378:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ButtonState>
 37c:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <ButtonState+0x1>
 380:	84 2b       	or	r24, r20
 382:	95 2b       	or	r25, r21
 384:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <ButtonState+0x1>
 388:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <ButtonState>
 38c:	67 ec       	ldi	r22, 0xC7	; 199
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0c 94 11 01 	jmp	0x222	; 0x222 <SendEvent>
 394:	83 30       	cpi	r24, 0x03	; 3
 396:	49 f4       	brne	.+18     	; 0x3aa <ProcessMessage+0x88>
 398:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <_testHandler>
 39c:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <_testHandler+0x1>
 3a0:	30 97       	sbiw	r30, 0x00	; 0
 3a2:	19 f0       	breq	.+6      	; 0x3aa <ProcessMessage+0x88>
 3a4:	64 2f       	mov	r22, r20
 3a6:	cd 01       	movw	r24, r26
 3a8:	09 94       	ijmp
 3aa:	08 95       	ret

000003ac <HandleMessage>:
 3ac:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <msgType.1871>
 3b0:	91 11       	cpse	r25, r1
 3b2:	05 c0       	rjmp	.+10     	; 0x3be <HandleMessage+0x12>
 3b4:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <msgType.1871>
 3b8:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <msgLen.1872>
 3bc:	08 95       	ret
 3be:	40 91 95 00 	lds	r20, 0x0095	; 0x800095 <msgLen.1872>
 3c2:	41 11       	cpse	r20, r1
 3c4:	04 c0       	rjmp	.+8      	; 0x3ce <HandleMessage+0x22>
 3c6:	82 50       	subi	r24, 0x02	; 2
 3c8:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <msgLen.1872>
 3cc:	15 c0       	rjmp	.+42     	; 0x3f8 <HandleMessage+0x4c>
 3ce:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <bufferIndex.1870>
 3d2:	e4 17       	cp	r30, r20
 3d4:	98 f4       	brcc	.+38     	; 0x3fc <HandleMessage+0x50>
 3d6:	21 e0       	ldi	r18, 0x01	; 1
 3d8:	2e 0f       	add	r18, r30
 3da:	20 93 94 00 	sts	0x0094, r18	; 0x800094 <bufferIndex.1870>
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	ea 57       	subi	r30, 0x7A	; 122
 3e2:	ff 4f       	sbci	r31, 0xFF	; 255
 3e4:	80 83       	st	Z, r24
 3e6:	42 13       	cpse	r20, r18
 3e8:	09 c0       	rjmp	.+18     	; 0x3fc <HandleMessage+0x50>
 3ea:	66 e8       	ldi	r22, 0x86	; 134
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	89 2f       	mov	r24, r25
 3f0:	0e 94 91 01 	call	0x322	; 0x322 <ProcessMessage>
 3f4:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <msgType.1871>
 3f8:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <bufferIndex.1870>
 3fc:	08 95       	ret

000003fe <SetInputOutput>:
 3fe:	cf 93       	push	r28
 400:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <outputRefreshCounter.1884>
 404:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <outputRefreshCounter.1884+0x1>
 408:	01 96       	adiw	r24, 0x01	; 1
 40a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <outputRefreshCounter.1884+0x1>
 40e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <outputRefreshCounter.1884>
 412:	83 70       	andi	r24, 0x03	; 3
 414:	99 27       	eor	r25, r25
 416:	89 2b       	or	r24, r25
 418:	21 f5       	brne	.+72     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 41a:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <doorRefreshCounter.1885>
 41e:	8f 5f       	subi	r24, 0xFF	; 255
 420:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <doorRefreshCounter.1885>
 424:	83 70       	andi	r24, 0x03	; 3
 426:	a8 2f       	mov	r26, r24
 428:	b0 e0       	ldi	r27, 0x00	; 0
 42a:	aa 0f       	add	r26, r26
 42c:	bb 1f       	adc	r27, r27
 42e:	a2 5a       	subi	r26, 0xA2	; 162
 430:	be 4f       	sbci	r27, 0xFE	; 254
 432:	11 96       	adiw	r26, 0x01	; 1
 434:	ec 91       	ld	r30, X
 436:	11 97       	sbiw	r26, 0x01	; 1
 438:	9c 91       	ld	r25, X
 43a:	94 ff       	sbrs	r25, 4
 43c:	03 c0       	rjmp	.+6      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 43e:	94 e0       	ldi	r25, 0x04	; 4
 440:	9e 1b       	sub	r25, r30
 442:	e9 2f       	mov	r30, r25
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	e4 59       	subi	r30, 0x94	; 148
 448:	ff 4f       	sbci	r31, 0xFF	; 255
 44a:	21 e0       	ldi	r18, 0x01	; 1
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	a9 01       	movw	r20, r18
 450:	02 c0       	rjmp	.+4      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 452:	44 0f       	add	r20, r20
 454:	55 1f       	adc	r21, r21
 456:	8a 95       	dec	r24
 458:	e2 f7       	brpl	.-8      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 45a:	ca 01       	movw	r24, r20
 45c:	90 81       	ld	r25, Z
 45e:	89 2b       	or	r24, r25
 460:	85 bb       	out	0x15, r24	; 21
 462:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <buttonRefreshCounter.1886>
 466:	8f 5f       	subi	r24, 0xFF	; 255
 468:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <buttonRefreshCounter.1886>
 46c:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <displayCache>
 470:	22 23       	and	r18, r18
 472:	01 f1       	breq	.+64     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 474:	83 70       	andi	r24, 0x03	; 3
 476:	62 2f       	mov	r22, r18
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	40 e1       	ldi	r20, 0x10	; 16
 47c:	50 e0       	ldi	r21, 0x00	; 0
 47e:	08 2e       	mov	r0, r24
 480:	02 c0       	rjmp	.+4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 482:	44 0f       	add	r20, r20
 484:	55 1f       	adc	r21, r21
 486:	0a 94       	dec	r0
 488:	e2 f7       	brpl	.-8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 48a:	46 23       	and	r20, r22
 48c:	57 23       	and	r21, r23
 48e:	45 2b       	or	r20, r21
 490:	11 f0       	breq	.+4      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 492:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <buttonLiftLed>
 496:	08 2e       	mov	r0, r24
 498:	02 c0       	rjmp	.+4      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49a:	75 95       	asr	r23
 49c:	67 95       	ror	r22
 49e:	0a 94       	dec	r0
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 4a2:	60 fd       	sbrc	r22, 0
 4a4:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <buttonFloorLed>
 4a8:	82 2f       	mov	r24, r18
 4aa:	80 7f       	andi	r24, 0xF0	; 240
 4ac:	19 f0       	breq	.+6      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4ae:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <buttonLiftLed_on>
 4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	2f 70       	andi	r18, 0x0F	; 15
 4b8:	19 f0       	breq	.+6      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4ba:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <buttonFloorLed_On>
 4be:	01 c0       	rjmp	.+2      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4c0:	21 e0       	ldi	r18, 0x01	; 1
 4c2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <liftPosDisplay_On>
 4c6:	81 11       	cpse	r24, r1
 4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4ca:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <Elevator>
 4ce:	3f 73       	andi	r19, 0x3F	; 63
 4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 4d2:	3f e3       	ldi	r19, 0x3F	; 63
 4d4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <liftDisplay7Seg_On>
 4d8:	81 11       	cpse	r24, r1
 4da:	03 c0       	rjmp	.+6      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4dc:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <liftDisplay7Seg>
 4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4e2:	87 e0       	ldi	r24, 0x07	; 7
 4e4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <floorDisplayPort>
 4e8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <doorframe>
 4ec:	60 e4       	ldi	r22, 0x40	; 64
 4ee:	86 9f       	mul	r24, r22
 4f0:	a0 01       	movw	r20, r0
 4f2:	11 24       	eor	r1, r1
 4f4:	60 e8       	ldi	r22, 0x80	; 128
 4f6:	96 9f       	mul	r25, r22
 4f8:	c0 01       	movw	r24, r0
 4fa:	11 24       	eor	r1, r1
 4fc:	84 2b       	or	r24, r20
 4fe:	83 2b       	or	r24, r19
 500:	88 bb       	out	0x18, r24	; 24
 502:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <buttonLiftLed>
 506:	98 e0       	ldi	r25, 0x08	; 8
 508:	89 9f       	mul	r24, r25
 50a:	a0 01       	movw	r20, r0
 50c:	11 24       	eor	r1, r1
 50e:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <buttonFloorLed>
 512:	30 e2       	ldi	r19, 0x20	; 32
 514:	93 9f       	mul	r25, r19
 516:	c0 01       	movw	r24, r0
 518:	11 24       	eor	r1, r1
 51a:	84 2b       	or	r24, r20
 51c:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <floorDisplayPort>
 520:	38 2b       	or	r19, r24
 522:	40 e8       	ldi	r20, 0x80	; 128
 524:	24 9f       	mul	r18, r20
 526:	c0 01       	movw	r24, r0
 528:	11 24       	eor	r1, r1
 52a:	83 2b       	or	r24, r19
 52c:	8b bb       	out	0x1b, r24	; 27
 52e:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <USART_rxBufferOut>
 532:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USART_rxBufferIn>
 536:	98 17       	cp	r25, r24
 538:	b9 f0       	breq	.+46     	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 53a:	0e 94 8e 00 	call	0x11c	; 0x11c <EnterAtomic>
 53e:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <USART_rxBufferOut>
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	8e 0f       	add	r24, r30
 546:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <USART_rxBufferOut>
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	e2 5c       	subi	r30, 0xC2	; 194
 54e:	fe 4f       	sbci	r31, 0xFE	; 254
 550:	c0 81       	ld	r28, Z
 552:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <USART_rxBufferOut>
 556:	8f 71       	andi	r24, 0x1F	; 31
 558:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <USART_rxBufferOut>
 55c:	0e 94 95 00 	call	0x12a	; 0x12a <LeaveAtomic>
 560:	8c 2f       	mov	r24, r28
 562:	0e 94 d6 01 	call	0x3ac	; 0x3ac <HandleMessage>
 566:	e3 cf       	rjmp	.-58     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 568:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <terminalRefreshCounter.1887>
 56c:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <terminalRefreshCounter.1887+0x1>
 570:	9c 01       	movw	r18, r24
 572:	2f 5f       	subi	r18, 0xFF	; 255
 574:	3f 4f       	sbci	r19, 0xFF	; 255
 576:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <terminalRefreshCounter.1887+0x1>
 57a:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <terminalRefreshCounter.1887>
 57e:	8f 3f       	cpi	r24, 0xFF	; 255
 580:	9f 40       	sbci	r25, 0x0F	; 15
 582:	c9 f4       	brne	.+50     	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
 584:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <EnableStatusUpdate>
 588:	88 23       	and	r24, r24
 58a:	a9 f0       	breq	.+42     	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
 58c:	84 e0       	ldi	r24, 0x04	; 4
 58e:	0e 94 0d 01 	call	0x21a	; 0x21a <Usart_PutChar>
 592:	86 e0       	ldi	r24, 0x06	; 6
 594:	0e 94 0d 01 	call	0x21a	; 0x21a <Usart_PutChar>
 598:	85 ea       	ldi	r24, 0xA5	; 165
 59a:	0e 94 0d 01 	call	0x21a	; 0x21a <Usart_PutChar>
 59e:	8a e5       	ldi	r24, 0x5A	; 90
 5a0:	0e 94 0d 01 	call	0x21a	; 0x21a <Usart_PutChar>
 5a4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <SystemState>
 5a8:	0e 94 0d 01 	call	0x21a	; 0x21a <Usart_PutChar>
 5ac:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <OpenDoors>
 5b0:	cf 91       	pop	r28
 5b2:	0c 94 0d 01 	jmp	0x21a	; 0x21a <Usart_PutChar>
 5b6:	cf 91       	pop	r28
 5b8:	08 95       	ret

000005ba <InitializeStart>:
 5ba:	8a ec       	ldi	r24, 0xCA	; 202
 5bc:	0e 94 0d 01 	call	0x21a	; 0x21a <Usart_PutChar>
 5c0:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <liftPosDisplay_On>
 5c4:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <buttonLiftLed_on>
 5c8:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <liftDisplay7Seg_On>
 5cc:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <buttonFloorLed_On>
 5d0:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <doorframe>
 5d4:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <liftDoorState+0x1>
 5d8:	80 e2       	ldi	r24, 0x20	; 32
 5da:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <liftDoorState>
 5de:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <liftDoorState+0x3>
 5e2:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <liftDoorState+0x2>
 5e6:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <liftDoorState+0x5>
 5ea:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <liftDoorState+0x4>
 5ee:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <liftDoorState+0x7>
 5f2:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <liftDoorState+0x6>
 5f6:	8f e1       	ldi	r24, 0x1F	; 31
 5f8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Elevator>
 5fc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Elevator+0x1>
 600:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <InitializeCounter>
 604:	20 e0       	ldi	r18, 0x00	; 0
 606:	40 e0       	ldi	r20, 0x00	; 0
 608:	61 ec       	ldi	r22, 0xC1	; 193
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	0e 94 11 01 	call	0x222	; 0x222 <SendEvent>
 610:	8e ef       	ldi	r24, 0xFE	; 254
 612:	0e 94 0d 01 	call	0x21a	; 0x21a <Usart_PutChar>
 616:	0e 94 9e 00 	call	0x13c	; 0x13c <DispatchEvent>
 61a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <SetInputOutput>
 61e:	fb cf       	rjmp	.-10     	; 0x616 <InitializeStart+0x5c>

00000620 <__vector_1>:
 620:	1f 92       	push	r1
 622:	0f 92       	push	r0
 624:	0f b6       	in	r0, 0x3f	; 63
 626:	0f 92       	push	r0
 628:	11 24       	eor	r1, r1
 62a:	2f 93       	push	r18
 62c:	3f 93       	push	r19
 62e:	4f 93       	push	r20
 630:	5f 93       	push	r21
 632:	6f 93       	push	r22
 634:	7f 93       	push	r23
 636:	8f 93       	push	r24
 638:	9f 93       	push	r25
 63a:	af 93       	push	r26
 63c:	bf 93       	push	r27
 63e:	ef 93       	push	r30
 640:	ff 93       	push	r31
 642:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ButtonState>
 646:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <ButtonState+0x1>
 64a:	91 60       	ori	r25, 0x01	; 1
 64c:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <ButtonState+0x1>
 650:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <ButtonState>
 654:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <ButtonState>
 658:	50 91 1e 01 	lds	r21, 0x011E	; 0x80011e <ButtonState+0x1>
 65c:	20 e0       	ldi	r18, 0x00	; 0
 65e:	69 ec       	ldi	r22, 0xC9	; 201
 660:	80 e1       	ldi	r24, 0x10	; 16
 662:	0e 94 11 01 	call	0x222	; 0x222 <SendEvent>
 666:	ff 91       	pop	r31
 668:	ef 91       	pop	r30
 66a:	bf 91       	pop	r27
 66c:	af 91       	pop	r26
 66e:	9f 91       	pop	r25
 670:	8f 91       	pop	r24
 672:	7f 91       	pop	r23
 674:	6f 91       	pop	r22
 676:	5f 91       	pop	r21
 678:	4f 91       	pop	r20
 67a:	3f 91       	pop	r19
 67c:	2f 91       	pop	r18
 67e:	0f 90       	pop	r0
 680:	0f be       	out	0x3f, r0	; 63
 682:	0f 90       	pop	r0
 684:	1f 90       	pop	r1
 686:	18 95       	reti

00000688 <__vector_13>:
 688:	1f 92       	push	r1
 68a:	0f 92       	push	r0
 68c:	0f b6       	in	r0, 0x3f	; 63
 68e:	0f 92       	push	r0
 690:	11 24       	eor	r1, r1
 692:	2f 93       	push	r18
 694:	3f 93       	push	r19
 696:	8f 93       	push	r24
 698:	9f 93       	push	r25
 69a:	ef 93       	push	r30
 69c:	ff 93       	push	r31
 69e:	5f 9b       	sbis	0x0b, 7	; 11
 6a0:	1e c0       	rjmp	.+60     	; 0x6de <__vector_13+0x56>
 6a2:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USART_rxBufferIn>
 6a6:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <USART_rxBufferOut>
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	01 96       	adiw	r24, 0x01	; 1
 6ae:	8f 71       	andi	r24, 0x1F	; 31
 6b0:	99 27       	eor	r25, r25
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	82 17       	cp	r24, r18
 6b6:	93 07       	cpc	r25, r19
 6b8:	89 f0       	breq	.+34     	; 0x6dc <__vector_13+0x54>
 6ba:	8c b1       	in	r24, 0x0c	; 12
 6bc:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <USART_rxBufferIn>
 6c0:	91 e0       	ldi	r25, 0x01	; 1
 6c2:	9e 0f       	add	r25, r30
 6c4:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <USART_rxBufferIn>
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	e2 5c       	subi	r30, 0xC2	; 194
 6cc:	fe 4f       	sbci	r31, 0xFE	; 254
 6ce:	80 83       	st	Z, r24
 6d0:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USART_rxBufferIn>
 6d4:	8f 71       	andi	r24, 0x1F	; 31
 6d6:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <USART_rxBufferIn>
 6da:	e1 cf       	rjmp	.-62     	; 0x69e <__vector_13+0x16>
 6dc:	57 98       	cbi	0x0a, 7	; 10
 6de:	ff 91       	pop	r31
 6e0:	ef 91       	pop	r30
 6e2:	9f 91       	pop	r25
 6e4:	8f 91       	pop	r24
 6e6:	3f 91       	pop	r19
 6e8:	2f 91       	pop	r18
 6ea:	0f 90       	pop	r0
 6ec:	0f be       	out	0x3f, r0	; 63
 6ee:	0f 90       	pop	r0
 6f0:	1f 90       	pop	r1
 6f2:	18 95       	reti

000006f4 <__vector_7>:
 6f4:	1f 92       	push	r1
 6f6:	0f 92       	push	r0
 6f8:	0f b6       	in	r0, 0x3f	; 63
 6fa:	0f 92       	push	r0
 6fc:	11 24       	eor	r1, r1
 6fe:	2f 93       	push	r18
 700:	3f 93       	push	r19
 702:	4f 93       	push	r20
 704:	5f 93       	push	r21
 706:	6f 93       	push	r22
 708:	7f 93       	push	r23
 70a:	8f 93       	push	r24
 70c:	9f 93       	push	r25
 70e:	af 93       	push	r26
 710:	bf 93       	push	r27
 712:	ef 93       	push	r30
 714:	ff 93       	push	r31
 716:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <ElevatorTick.1962>
 71a:	8f 5f       	subi	r24, 0xFF	; 255
 71c:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <ElevatorTick.1962>
 720:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <__data_end>
 724:	9f 5f       	subi	r25, 0xFF	; 255
 726:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__data_end>
 72a:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <Elevator+0x2>
 72e:	0e 94 2c 04 	call	0x858	; 0x858 <__udivmodqi4>
 732:	91 11       	cpse	r25, r1
 734:	14 c0       	rjmp	.+40     	; 0x75e <__vector_7+0x6a>
 736:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <Elevator>
 73a:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <Elevator+0x1>
 73e:	96 17       	cp	r25, r22
 740:	61 f0       	breq	.+24     	; 0x75a <__vector_7+0x66>
 742:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Elevator+0x4>
 746:	89 0f       	add	r24, r25
 748:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Elevator>
 74c:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <Elevator+0x5>
 750:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <Elevator+0x6>
 754:	30 97       	sbiw	r30, 0x00	; 0
 756:	09 f0       	breq	.+2      	; 0x75a <__vector_7+0x66>
 758:	09 95       	icall
 75a:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <ElevatorTick.1962>
 75e:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
 762:	6c e0       	ldi	r22, 0x0C	; 12
 764:	0e 94 2c 04 	call	0x858	; 0x858 <__udivmodqi4>
 768:	91 11       	cpse	r25, r1
 76a:	04 c0       	rjmp	.+8      	; 0x774 <__vector_7+0x80>
 76c:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__data_end>
 770:	0e 94 4c 01 	call	0x298	; 0x298 <MakeDoorStates>
 774:	ff 91       	pop	r31
 776:	ef 91       	pop	r30
 778:	bf 91       	pop	r27
 77a:	af 91       	pop	r26
 77c:	9f 91       	pop	r25
 77e:	8f 91       	pop	r24
 780:	7f 91       	pop	r23
 782:	6f 91       	pop	r22
 784:	5f 91       	pop	r21
 786:	4f 91       	pop	r20
 788:	3f 91       	pop	r19
 78a:	2f 91       	pop	r18
 78c:	0f 90       	pop	r0
 78e:	0f be       	out	0x3f, r0	; 63
 790:	0f 90       	pop	r0
 792:	1f 90       	pop	r1
 794:	18 95       	reti

00000796 <__vector_10>:
 796:	1f 92       	push	r1
 798:	0f 92       	push	r0
 79a:	0f b6       	in	r0, 0x3f	; 63
 79c:	0f 92       	push	r0
 79e:	11 24       	eor	r1, r1
 7a0:	cf 92       	push	r12
 7a2:	df 92       	push	r13
 7a4:	ff 92       	push	r15
 7a6:	0f 93       	push	r16
 7a8:	1f 93       	push	r17
 7aa:	2f 93       	push	r18
 7ac:	3f 93       	push	r19
 7ae:	4f 93       	push	r20
 7b0:	5f 93       	push	r21
 7b2:	6f 93       	push	r22
 7b4:	7f 93       	push	r23
 7b6:	8f 93       	push	r24
 7b8:	9f 93       	push	r25
 7ba:	af 93       	push	r26
 7bc:	bf 93       	push	r27
 7be:	cf 93       	push	r28
 7c0:	df 93       	push	r29
 7c2:	ef 93       	push	r30
 7c4:	ff 93       	push	r31
 7c6:	0b e2       	ldi	r16, 0x2B	; 43
 7c8:	11 e0       	ldi	r17, 0x01	; 1
 7ca:	c0 e0       	ldi	r28, 0x00	; 0
 7cc:	d0 e0       	ldi	r29, 0x00	; 0
 7ce:	cc 24       	eor	r12, r12
 7d0:	c3 94       	inc	r12
 7d2:	d1 2c       	mov	r13, r1
 7d4:	f0 90 3b 01 	lds	r15, 0x013B	; 0x80013b <UsedTimers>
 7d8:	8f 2d       	mov	r24, r15
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	0c 2e       	mov	r0, r28
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <__vector_10+0x4e>
 7e0:	95 95       	asr	r25
 7e2:	87 95       	ror	r24
 7e4:	0a 94       	dec	r0
 7e6:	e2 f7       	brpl	.-8      	; 0x7e0 <__vector_10+0x4a>
 7e8:	80 ff       	sbrs	r24, 0
 7ea:	18 c0       	rjmp	.+48     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 7ec:	f8 01       	movw	r30, r16
 7ee:	80 81       	ld	r24, Z
 7f0:	91 81       	ldd	r25, Z+1	; 0x01
 7f2:	01 97       	sbiw	r24, 0x01	; 1
 7f4:	91 83       	std	Z+1, r25	; 0x01
 7f6:	80 83       	st	Z, r24
 7f8:	89 2b       	or	r24, r25
 7fa:	81 f4       	brne	.+32     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 7fc:	20 e0       	ldi	r18, 0x00	; 0
 7fe:	40 e0       	ldi	r20, 0x00	; 0
 800:	68 ec       	ldi	r22, 0xC8	; 200
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	0e 94 11 01 	call	0x222	; 0x222 <SendEvent>
 808:	c6 01       	movw	r24, r12
 80a:	0c 2e       	mov	r0, r28
 80c:	01 c0       	rjmp	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80e:	88 0f       	add	r24, r24
 810:	0a 94       	dec	r0
 812:	ea f7       	brpl	.-6      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 814:	80 95       	com	r24
 816:	f8 22       	and	r15, r24
 818:	f0 92 3b 01 	sts	0x013B, r15	; 0x80013b <UsedTimers>
 81c:	21 96       	adiw	r28, 0x01	; 1
 81e:	0e 5f       	subi	r16, 0xFE	; 254
 820:	1f 4f       	sbci	r17, 0xFF	; 255
 822:	c8 30       	cpi	r28, 0x08	; 8
 824:	d1 05       	cpc	r29, r1
 826:	b1 f6       	brne	.-84     	; 0x7d4 <__vector_10+0x3e>
 828:	ff 91       	pop	r31
 82a:	ef 91       	pop	r30
 82c:	df 91       	pop	r29
 82e:	cf 91       	pop	r28
 830:	bf 91       	pop	r27
 832:	af 91       	pop	r26
 834:	9f 91       	pop	r25
 836:	8f 91       	pop	r24
 838:	7f 91       	pop	r23
 83a:	6f 91       	pop	r22
 83c:	5f 91       	pop	r21
 83e:	4f 91       	pop	r20
 840:	3f 91       	pop	r19
 842:	2f 91       	pop	r18
 844:	1f 91       	pop	r17
 846:	0f 91       	pop	r16
 848:	ff 90       	pop	r15
 84a:	df 90       	pop	r13
 84c:	cf 90       	pop	r12
 84e:	0f 90       	pop	r0
 850:	0f be       	out	0x3f, r0	; 63
 852:	0f 90       	pop	r0
 854:	1f 90       	pop	r1
 856:	18 95       	reti

00000858 <__udivmodqi4>:
 858:	99 1b       	sub	r25, r25
 85a:	79 e0       	ldi	r23, 0x09	; 9
 85c:	04 c0       	rjmp	.+8      	; 0x866 <__udivmodqi4_ep>

0000085e <__udivmodqi4_loop>:
 85e:	99 1f       	adc	r25, r25
 860:	96 17       	cp	r25, r22
 862:	08 f0       	brcs	.+2      	; 0x866 <__udivmodqi4_ep>
 864:	96 1b       	sub	r25, r22

00000866 <__udivmodqi4_ep>:
 866:	88 1f       	adc	r24, r24
 868:	7a 95       	dec	r23
 86a:	c9 f7       	brne	.-14     	; 0x85e <__udivmodqi4_loop>
 86c:	80 95       	com	r24
 86e:	08 95       	ret

00000870 <_exit>:
 870:	f8 94       	cli

00000872 <__stop_program>:
 872:	ff cf       	rjmp	.-2      	; 0x872 <__stop_program>
